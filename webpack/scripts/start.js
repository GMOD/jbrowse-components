// Makes the script crash on unhandled rejections instead of silently ignoring
// them. In the future, promise rejections that are not handled will terminate
// the Node.js process with a non-zero exit code.
process.on('unhandledRion', err => {
  throw err
})

// Ensure environment variables are read.
require('../config/env')

const fs = require('fs')
const chalk = require('chalk')
const {
  choosePort,
  createCompiler,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils')
const { checkBrowsers } = require('react-dev-utils/browsersHelper')
const clearConsole = require('react-dev-utils/clearConsole')
const openBrowser = require('react-dev-utils/openBrowser')
const webpack = require('webpack')
const WebpackDevServer = require('webpack-dev-server')
const paths = require('../config/paths')

const useYarn = fs.existsSync(paths.yarnLockFile)
const isInteractive = process.stdout.isTTY

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = Number.parseInt(process.env.PORT, 10) || 3000
const HOST = process.env.HOST || '0.0.0.0'

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST),
      )}`,
    ),
  )
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`,
  )
  console.log(
    `Learn more here: ${chalk.yellow('https://cra.link/advanced-config')}`,
  )
  console.log()
}

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.

module.exports = function startWebpack(config) {
  return checkBrowsers(paths.appPath, isInteractive)
    .then(() => {
      // We attempt to use the default port but if it is busy, we offer the user to
      // run on a different port. `choosePort()` Promise resolves to the next free port.
      return choosePort(HOST, DEFAULT_PORT)
    })
    .then(port => {
      if (port == null) {
        // We have not found a port.
        return
      }

      const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
      const appName = require(paths.appPackageJson).name

      const useTypeScript = fs.existsSync(paths.appTsConfig)
      const urls = prepareUrls(
        protocol,
        HOST,
        port,
        paths.publicUrlOrPath.slice(0, -1),
      )
      // Create a webpack compiler that is configured with custom messages.
      const compiler = createCompiler({
        appName,
        config,
        urls,
        useYarn,
        useTypeScript,
        webpack,
      })

      // Serve webpack assets generated by the compiler over a web server.
      const serverConfig = {
        host: HOST,
        port,
      }
      const devServer = new WebpackDevServer(serverConfig, compiler)
      // Launch WebpackDevServer.
      devServer.startCallback(() => {
        if (isInteractive) {
          clearConsole()
        }

        openBrowser(urls.localUrlForBrowser)
      })
    })
    .catch(err => {
      if (err?.message) {
        console.log(err.message)
      }
      process.exit(1)
    })
}
