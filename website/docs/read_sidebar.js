const fs = require('fs')
const path = require('path')

const sidebar = JSON.parse(fs.readFileSync('../sidebars.json'))

const walk = async dirPath =>
  Promise.all(
    await fs.promises.readdir(dirPath, { withFileTypes: true }).then(entries =>
      entries.map(entry => {
        const childPath = path.join(dirPath, entry.name)
        return entry.isDirectory() ? walk(childPath) : childPath
      }),
    ),
  )

async function readTree(tree, res = []) {
  for (const subtree of tree) {
    if (subtree.type === 'autogenerated') {
      const subDir = await walk(subtree.dirName)
      for (const i of subDir.flat()) {
        if (!i.startsWith('config/') && !i.startsWith('models/')) {
          res.push(i)
        }
      }
    } else if (subtree.items) {
      await readTree(subtree.items, res)
    } else if (typeof subtree === 'string') {
      res.push(`${subtree}.md`)
    } else if (subtree.id !== 'combined' && subtree.id !== 'combined_pdf') {
      res.push(`${subtree.id}.md`)
    }
  }
  return res
}

;(async () => {
  const res1 = await readTree(sidebar.sidebar)
  const res = res1.filter(f => !f.includes('archive')).join('\n')

  // eslint-disable-next-line no-console
  console.log(res)
})()
