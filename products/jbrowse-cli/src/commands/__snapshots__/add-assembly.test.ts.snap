// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`add-assembly no load flag 1`] = `"Please specify the loading operation for this file with --load copy|symlink|move|inPlace"`;

exports[`adds an assembly from a 2bit 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "twoBitLocation": {
            "locationType": "UriLocation",
            "uri": "simple.2bit",
          },
          "type": "TwoBitAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from a FASTA (.fa extension) 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "faiLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fa.fai",
          },
          "fastaLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fa",
          },
          "type": "IndexedFastaAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from a FASTA (bgzip) 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "faiLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.gz.fai",
          },
          "fastaLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.gz",
          },
          "gziLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.gz.gzi",
          },
          "type": "BgzipFastaAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from a FASTA 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "faiLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.fai",
          },
          "fastaLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta",
          },
          "type": "IndexedFastaAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from a URL 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "twoBitLocation": {
            "locationType": "UriLocation",
            "uri": "https://mysite.com/data/simple.2bit",
          },
          "type": "TwoBitAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from a custom adapter JSON file 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "features": [
            {
              "end": 233,
              "refName": "SEQUENCE_1",
              "seq": "CCAAGATCTAAGATGTCAACACCTATCTGCTCAAGGTGGTTTTTATAAGGAGTCGCATCGAGGTAAGACATTTTAGAAGTATTTCTCAAGCGTGGGGCAGTTCGCCAAGTTACATCGCTCAGCCCAGGTTCCCTGATTCGAGAACATATCGGTGCTGGGTATTTGTTGGGTTGGTTGATTTGCACCGTAGTTTACACCTTACGACACTACCTATCCAAACAATTGTGTGATAG",
              "start": 0,
              "uniqueId": "firstId",
            },
            {
              "end": 120,
              "refName": "SEQUENCE_2",
              "seq": "CCGAACCACAGGCCTATGTTACCATTGGAAAGCTCACCTTCCCGAAGGATTGGGACTCCACTAGTCGAAGCCTCAATTCGCCGCGATTAGATAGGGGGCAAGTGGAGATTGATGTTTGGT",
              "start": 0,
              "uniqueId": "secondId",
            },
          ],
          "type": "FromConfigSequenceAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from a custom adapter inline JSON 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "features": [
            {
              "end": 233,
              "refName": "SEQUENCE_1",
              "start": 0,
              "uniqueId": "firstId",
            },
            {
              "end": 120,
              "refName": "SEQUENCE_2",
              "start": 0,
              "uniqueId": "secondId",
            },
          ],
          "type": "FromConfigRegionsAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`adds an assembly from chrom.sizes 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "chromSizesLocation": {
            "locationType": "UriLocation",
            "uri": "simple.chrom.sizes",
          },
          "type": "ChromSizesAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify --type when the type can't be inferred from the extension 1`] = `
{
  "assemblies": [
    {
      "name": "simple.2bit.xyz",
      "sequence": {
        "adapter": {
          "twoBitLocation": {
            "locationType": "UriLocation",
            "uri": "simple.2bit.xyz",
          },
          "type": "TwoBitAdapter",
        },
        "trackId": "simple.2bit.xyz-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify a custom faiLocation and gziLocation 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "faiLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.gz.fai.abc",
          },
          "fastaLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.gz",
          },
          "gziLocation": {
            "locationType": "UriLocation",
            "uri": "simple.fasta.gz.gzi.def",
          },
          "type": "BgzipFastaAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify a custom name and alias 1`] = `
{
  "assemblies": [
    {
      "aliases": [
        "customAlias",
      ],
      "name": "customName",
      "sequence": {
        "adapter": {
          "type": "CustomAdapter",
        },
        "trackId": "customName-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify a custom name and alias and refNameColors 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "refNameColors": [
        "red",
        "orange",
        "yellow",
        "green",
        "blue",
        "purple",
      ],
      "sequence": {
        "adapter": {
          "type": "CustomAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify a multiple aliases 1`] = `
{
  "assemblies": [
    {
      "aliases": [
        "firstAlias",
        "secondAlias",
      ],
      "name": "simple",
      "sequence": {
        "adapter": {
          "type": "CustomAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify a refNameAliases file 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "refNameAliases": {
        "adapter": {
          "location": {
            "locationType": "UriLocation",
            "uri": "simple.aliases",
          },
          "type": "RefNameAliasAdapter",
        },
      },
      "sequence": {
        "adapter": {
          "type": "CustomAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can specify a refNameAliases file type custom 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "refNameAliases": {
        "adapter": {
          "type": "CustomAdapter",
        },
      },
      "sequence": {
        "adapter": {
          "type": "CustomAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can use --overwrite to replace an existing assembly 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "twoBitLocation": {
            "locationType": "UriLocation",
            "uri": "simple.2bit",
          },
          "type": "TwoBitAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`can use an existing config file 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "type": "CustomAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;

exports[`fails if custom refNameAliases adapter has no type 1`] = `"No "type" specified in refNameAliases adapter "{}""`;

exports[`fails if custom refNameAliases adapter has no type 2`] = `"No "type" specified in refNameAliases adapter "{}""`;

exports[`fails if custom sequence adapter has no type 1`] = `"No "type" specified in sequence adapter "{}""`;

exports[`fails if it cannot find a file 1`] = `"Could not resolve to a file or a URL: "simple.doesNotExist.fasta""`;

exports[`fails if it cannot guess the sequence type 1`] = `"Could not determine sequence type automatically, add --type to specify it"`;

exports[`fails if load flag is passed with a URL 1`] = `"URL detected with --load flag. Please rerun the function without the --load flag"`;

exports[`fails if trying to add an assembly with a name that already exists 1`] = `"Cannot add assembly with name simple, an assembly with that name already exists"`;

exports[`fails if using inline JSON sequence custom with no --name 1`] = `"Must provide --name when using custom inline JSON sequence"`;

exports[`fails if using invalid inline JSON 1`] = `"Error: ENOENT: no such file or directory, open 'notValidJSON'"`;

exports[`relative path 1`] = `
{
  "assemblies": [
    {
      "name": "simple",
      "sequence": {
        "adapter": {
          "twoBitLocation": {
            "locationType": "UriLocation",
            "uri": "../simple.2bit",
          },
          "type": "TwoBitAdapter",
        },
        "trackId": "simple-ReferenceSequenceTrack",
        "type": "ReferenceSequenceTrack",
      },
    },
  ],
  "configuration": {},
  "connections": [],
  "defaultSession": {
    "name": "New Session",
  },
  "tracks": [],
}
`;
