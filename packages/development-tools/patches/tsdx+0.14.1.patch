diff --git a/node_modules/tsdx/dist/createRollupConfig.js b/node_modules/tsdx/dist/createRollupConfig.js
index d6d9378..75b8fe7 100644
--- a/node_modules/tsdx/dist/createRollupConfig.js
+++ b/node_modules/tsdx/dist/createRollupConfig.js
@@ -11,9 +11,15 @@ const plugin_replace_1 = tslib_1.__importDefault(require("@rollup/plugin-replace
 const plugin_node_resolve_1 = tslib_1.__importStar(require("@rollup/plugin-node-resolve"));
 const rollup_plugin_sourcemaps_1 = tslib_1.__importDefault(require("rollup-plugin-sourcemaps"));
 const rollup_plugin_typescript2_1 = tslib_1.__importDefault(require("rollup-plugin-typescript2"));
+const fs = tslib_1.__importStar(require("fs-extra"));
 const typescript_1 = tslib_1.__importDefault(require("typescript"));
 const extractErrors_1 = require("./errors/extractErrors");
 const babelPluginTsdx_1 = require("./babelPluginTsdx");
+let appPackageJson;
+try {
+    appPackageJson = fs.readJSONSync(constants_1.paths.appPackageJson);
+}
+catch (e) { }
 const errorCodeOpts = {
     errorMapFilePath: constants_1.paths.appErrorsJson,
 };
@@ -24,7 +30,7 @@ async function createRollupConfig(opts, outputNum) {
     const findAndRecordErrorCodes = await extractErrors_1.extractErrors(Object.assign(Object.assign({}, errorCodeOpts), opts));
     const shouldMinify = opts.minify !== undefined ? opts.minify : opts.env === 'production';
     const outputName = [
-        `${constants_1.paths.appDist}/${utils_1.safePackageName(opts.name)}`,
+        `${constants_1.paths.appDist}/${utils_1.safePackageName(appPackageJson.name)}`,
         opts.format,
         opts.env,
         shouldMinify ? 'min' : '',
diff --git a/node_modules/tsdx/dist/index.js b/node_modules/tsdx/dist/index.js
index d2322e5..a7278fa 100755
--- a/node_modules/tsdx/dist/index.js
+++ b/node_modules/tsdx/dist/index.js
@@ -214,7 +214,7 @@ prog
         await cleanDistFolder();
     }
     if (opts.format.includes('cjs')) {
-        await writeCjsEntryFile(opts.name);
+        await writeCjsEntryFile(appPackageJson.name);
     }
     let firstTime = true;
     let successKiller = null;
@@ -295,7 +295,7 @@ prog
     await cleanDistFolder();
     const logger = await createProgressEstimator_1.createProgressEstimator();
     if (opts.format.includes('cjs')) {
-        const promise = writeCjsEntryFile(opts.name).catch(logError_1.default);
+        const promise = writeCjsEntryFile(appPackageJson.name).catch(logError_1.default);
         logger(promise, 'Creating entry file');
     }
     try {
