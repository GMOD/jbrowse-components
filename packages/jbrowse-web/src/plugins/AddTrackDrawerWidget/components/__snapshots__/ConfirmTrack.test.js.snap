// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ConfirmTrack /> mounts with config 1`] = `
Array [
  <WithStyles(Typography)
    className="ConfirmTrack-spacing-1"
  >
    <Typography
      align="inherit"
      className="ConfirmTrack-spacing-1"
      classes={
        Object {
          "alignCenter": "MuiTypography-alignCenter-25",
          "alignJustify": "MuiTypography-alignJustify-27",
          "alignLeft": "MuiTypography-alignLeft-24",
          "alignRight": "MuiTypography-alignRight-26",
          "body1": "MuiTypography-body1-11",
          "body2": "MuiTypography-body2-10",
          "button": "MuiTypography-button-13",
          "caption": "MuiTypography-caption-12",
          "colorError": "MuiTypography-colorError-36",
          "colorInherit": "MuiTypography-colorInherit-31",
          "colorPrimary": "MuiTypography-colorPrimary-32",
          "colorSecondary": "MuiTypography-colorSecondary-33",
          "colorTextPrimary": "MuiTypography-colorTextPrimary-34",
          "colorTextSecondary": "MuiTypography-colorTextSecondary-35",
          "display1": "MuiTypography-display1-6",
          "display2": "MuiTypography-display2-5",
          "display3": "MuiTypography-display3-4",
          "display4": "MuiTypography-display4-3",
          "gutterBottom": "MuiTypography-gutterBottom-29",
          "h1": "MuiTypography-h1-14",
          "h2": "MuiTypography-h2-15",
          "h3": "MuiTypography-h3-16",
          "h4": "MuiTypography-h4-17",
          "h5": "MuiTypography-h5-18",
          "h6": "MuiTypography-h6-19",
          "headline": "MuiTypography-headline-7",
          "inline": "MuiTypography-inline-37",
          "noWrap": "MuiTypography-noWrap-28",
          "overline": "MuiTypography-overline-22",
          "paragraph": "MuiTypography-paragraph-30",
          "root": "MuiTypography-root-2",
          "srOnly": "MuiTypography-srOnly-23",
          "subheading": "MuiTypography-subheading-9",
          "subtitle1": "MuiTypography-subtitle1-20",
          "subtitle2": "MuiTypography-subtitle2-21",
          "title": "MuiTypography-title-8",
        }
      }
      color="default"
      gutterBottom={false}
      headlineMapping={
        Object {
          "body1": "p",
          "body2": "p",
          "display1": "h1",
          "display2": "h1",
          "display3": "h1",
          "display4": "h1",
          "h1": "h1",
          "h2": "h2",
          "h3": "h3",
          "h4": "h4",
          "h5": "h5",
          "h6": "h6",
          "headline": "h1",
          "subheading": "h3",
          "subtitle1": "h6",
          "subtitle2": "h6",
          "title": "h2",
        }
      }
      inline={false}
      noWrap={false}
      paragraph={false}
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "hover": "rgba(0, 0, 0, 0.08)",
              "hoverOpacity": 0.08,
              "selected": "rgba(0, 0, 0, 0.14)",
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "#303f9f",
              "light": "#7986cb",
              "main": "#3f51b5",
            },
            "secondary": Object {
              "contrastText": "#fff",
              "dark": "#c51162",
              "light": "#ff4081",
              "main": "#f50057",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
            "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
            "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": Object {
            "unit": 8,
          },
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": "1.46429em",
            },
            "body1Next": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": "1.71429em",
            },
            "body2Next": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.5,
            },
            "button": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "textTransform": "uppercase",
            },
            "buttonNext": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": "1.375em",
            },
            "captionNext": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "display1": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": "1.20588em",
            },
            "display2": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.8125rem",
              "fontWeight": 400,
              "lineHeight": "1.13333em",
              "marginLeft": "-.02em",
            },
            "display3": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.5rem",
              "fontWeight": 400,
              "letterSpacing": "-.02em",
              "lineHeight": "1.30357em",
              "marginLeft": "-.02em",
            },
            "display4": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "7rem",
              "fontWeight": 300,
              "letterSpacing": "-.04em",
              "lineHeight": "1.14286em",
              "marginLeft": "-.04em",
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1,
            },
            "h2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1,
            },
            "h3": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.04,
            },
            "h4": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.17,
            },
            "h5": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.33,
            },
            "h6": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.25rem",
              "fontWeight": 500,
              "letterSpacing": "0.0075em",
              "lineHeight": 1.6,
            },
            "headline": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": "1.35417em",
            },
            "overline": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subheading": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": "1.5em",
            },
            "subtitle1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
            "title": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.3125rem",
              "fontWeight": 500,
              "lineHeight": "1.16667em",
            },
            "useNextVariants": false,
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "tooltip": 1500,
          },
        }
      }
    >
      <p
        className="MuiTypography-root-2 MuiTypography-body1-11 ConfirmTrack-spacing-1"
      >
        Using adapter 
        <code>
          FromConfigAdapter
        </code>
         and guessing track type 
        <code>
          AlignmentsTrack
        </code>
        . Please enter a track name and, if necessary, update the track type.
      </p>
    </Typography>
  </WithStyles(Typography)>,
  <TextField
    className="ConfirmTrack-spacing-1"
    fullWidth={true}
    helperText="A name for this track"
    label="trackName"
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "bamLocation": Object {
                "uri": "test.bam",
              },
              "index": Object {
                "location": Object {
                  "uri": "test.bam.bai",
                },
              },
              "type": "BamAdapter",
            },
          ],
          Array [
            Object {
              "target": Object {
                "value": "AlignmentsTrack",
              },
            },
          ],
          Array [
            Object {
              "type": "FromConfigAdapter",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    required={false}
    select={false}
    value=""
    variant="standard"
  >
    <WithStyles(FormControl)
      className="ConfirmTrack-spacing-1"
      fullWidth={true}
      required={false}
      variant="standard"
    >
      <FormControl
        className="ConfirmTrack-spacing-1"
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth-41",
            "marginDense": "MuiFormControl-marginDense-40",
            "marginNormal": "MuiFormControl-marginNormal-39",
            "root": "MuiFormControl-root-38",
          }
        }
        component="div"
        disabled={false}
        error={false}
        fullWidth={true}
        margin="none"
        required={false}
        variant="standard"
      >
        <div
          className="MuiFormControl-root-38 MuiFormControl-fullWidth-41 ConfirmTrack-spacing-1"
        >
          <WithStyles(WithFormControlContext(InputLabel))>
            <WithFormControlContext(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated-50",
                  "disabled": "MuiInputLabel-disabled-44",
                  "error": "MuiInputLabel-error-45",
                  "filled": "MuiInputLabel-filled-51",
                  "focused": "MuiInputLabel-focused-43",
                  "formControl": "MuiInputLabel-formControl-47",
                  "marginDense": "MuiInputLabel-marginDense-48",
                  "outlined": "MuiInputLabel-outlined-52",
                  "required": "MuiInputLabel-required-46",
                  "root": "MuiInputLabel-root-42",
                  "shrink": "MuiInputLabel-shrink-49",
                }
              }
            >
              <InputLabel
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-50",
                    "disabled": "MuiInputLabel-disabled-44",
                    "error": "MuiInputLabel-error-45",
                    "filled": "MuiInputLabel-filled-51",
                    "focused": "MuiInputLabel-focused-43",
                    "formControl": "MuiInputLabel-formControl-47",
                    "marginDense": "MuiInputLabel-marginDense-48",
                    "outlined": "MuiInputLabel-outlined-52",
                    "required": "MuiInputLabel-required-46",
                    "root": "MuiInputLabel-root-42",
                    "shrink": "MuiInputLabel-shrink-49",
                  }
                }
                disableAnimation={false}
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": false,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <WithStyles(WithFormControlContext(FormLabel))
                  className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                  classes={
                    Object {
                      "disabled": "MuiInputLabel-disabled-44",
                      "error": "MuiInputLabel-error-45",
                      "focused": "MuiInputLabel-focused-43",
                      "required": "MuiInputLabel-required-46",
                    }
                  }
                  data-shrink={false}
                >
                  <WithFormControlContext(FormLabel)
                    className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk-59",
                        "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                        "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                        "filled": "MuiFormLabel-filled-57",
                        "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                        "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                        "root": "MuiFormLabel-root-53",
                      }
                    }
                    data-shrink={false}
                  >
                    <FormLabel
                      className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-59",
                          "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                          "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                          "filled": "MuiFormLabel-filled-57",
                          "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                          "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                          "root": "MuiFormLabel-root-53",
                        }
                      }
                      component="label"
                      data-shrink={false}
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": false,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "standard",
                        }
                      }
                    >
                      <label
                        className="MuiFormLabel-root-53 MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                        data-shrink={false}
                      >
                        trackName
                      </label>
                    </FormLabel>
                  </WithFormControlContext(FormLabel)>
                </WithStyles(WithFormControlContext(FormLabel))>
              </InputLabel>
            </WithFormControlContext(InputLabel)>
          </WithStyles(WithFormControlContext(InputLabel))>
          <WithStyles(Input)
            fullWidth={true}
            onChange={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "bamLocation": Object {
                        "uri": "test.bam",
                      },
                      "index": Object {
                        "location": Object {
                          "uri": "test.bam.bai",
                        },
                      },
                      "type": "BamAdapter",
                    },
                  ],
                  Array [
                    Object {
                      "target": Object {
                        "value": "AlignmentsTrack",
                      },
                    },
                  ],
                  Array [
                    Object {
                      "type": "FromConfigAdapter",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            value=""
          >
            <Input
              classes={
                Object {
                  "disabled": "MuiInput-disabled-63",
                  "error": "MuiInput-error-65",
                  "focused": "MuiInput-focused-62",
                  "formControl": "MuiInput-formControl-61",
                  "fullWidth": "MuiInput-fullWidth-67",
                  "input": "MuiInput-input-68",
                  "inputMarginDense": "MuiInput-inputMarginDense-69",
                  "inputMultiline": "MuiInput-inputMultiline-70",
                  "inputType": "MuiInput-inputType-71",
                  "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                  "multiline": "MuiInput-multiline-66",
                  "root": "MuiInput-root-60",
                  "underline": "MuiInput-underline-64",
                }
              }
              fullWidth={true}
              onChange={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "bamLocation": Object {
                          "uri": "test.bam",
                        },
                        "index": Object {
                          "location": Object {
                            "uri": "test.bam.bai",
                          },
                        },
                        "type": "BamAdapter",
                      },
                    ],
                    Array [
                      Object {
                        "target": Object {
                          "value": "AlignmentsTrack",
                        },
                      },
                    ],
                    Array [
                      Object {
                        "type": "FromConfigAdapter",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
              value=""
            >
              <WithStyles(WithFormControlContext(InputBase))
                classes={
                  Object {
                    "disabled": "MuiInput-disabled-63",
                    "error": "MuiInput-error-65",
                    "focused": "MuiInput-focused-62",
                    "formControl": "MuiInput-formControl-61",
                    "fullWidth": "MuiInput-fullWidth-67",
                    "input": "MuiInput-input-68",
                    "inputMarginDense": "MuiInput-inputMarginDense-69",
                    "inputMultiline": "MuiInput-inputMultiline-70",
                    "inputType": "MuiInput-inputType-71",
                    "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                    "multiline": "MuiInput-multiline-66",
                    "root": "MuiInput-root-60 MuiInput-underline-64",
                    "underline": null,
                  }
                }
                fullWidth={true}
                inputComponent="input"
                multiline={false}
                onChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "bamLocation": Object {
                            "uri": "test.bam",
                          },
                          "index": Object {
                            "location": Object {
                              "uri": "test.bam.bai",
                            },
                          },
                          "type": "BamAdapter",
                        },
                      ],
                      Array [
                        Object {
                          "target": Object {
                            "value": "AlignmentsTrack",
                          },
                        },
                      ],
                      Array [
                        Object {
                          "type": "FromConfigAdapter",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                type="text"
                value=""
              >
                <WithFormControlContext(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd-78",
                      "adornedStart": "MuiInputBase-adornedStart-77",
                      "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                      "error": "MuiInputBase-error-79 MuiInput-error-65",
                      "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                      "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                      "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                      "input": "MuiInputBase-input-83 MuiInput-input-68",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                      "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                      "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                      "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                      "marginDense": "MuiInputBase-marginDense-80",
                      "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                      "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                    }
                  }
                  fullWidth={true}
                  inputComponent="input"
                  multiline={false}
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "bamLocation": Object {
                              "uri": "test.bam",
                            },
                            "index": Object {
                              "location": Object {
                                "uri": "test.bam.bai",
                              },
                            },
                            "type": "BamAdapter",
                          },
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": "AlignmentsTrack",
                            },
                          },
                        ],
                        Array [
                          Object {
                            "type": "FromConfigAdapter",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  type="text"
                  value=""
                >
                  <InputBase
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd-78",
                        "adornedStart": "MuiInputBase-adornedStart-77",
                        "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                        "error": "MuiInputBase-error-79 MuiInput-error-65",
                        "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                        "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                        "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                        "input": "MuiInputBase-input-83 MuiInput-input-68",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                        "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                        "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                        "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                        "marginDense": "MuiInputBase-marginDense-80",
                        "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                        "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                      }
                    }
                    fullWidth={true}
                    inputComponent="input"
                    muiFormControl={
                      Object {
                        "adornedStart": false,
                        "disabled": false,
                        "error": false,
                        "filled": false,
                        "focused": false,
                        "margin": "none",
                        "onBlur": [Function],
                        "onEmpty": [Function],
                        "onFilled": [Function],
                        "onFocus": [Function],
                        "required": false,
                        "variant": "standard",
                      }
                    }
                    multiline={false}
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {
                              "bamLocation": Object {
                                "uri": "test.bam",
                              },
                              "index": Object {
                                "location": Object {
                                  "uri": "test.bam.bai",
                                },
                              },
                              "type": "BamAdapter",
                            },
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": "AlignmentsTrack",
                              },
                            },
                          ],
                          Array [
                            Object {
                              "type": "FromConfigAdapter",
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    type="text"
                    value=""
                  >
                    <div
                      className="MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64 MuiInputBase-fullWidth-82 MuiInput-fullWidth-67 MuiInputBase-formControl-74 MuiInput-formControl-61"
                      onClick={[Function]}
                    >
                      <input
                        aria-invalid={false}
                        className="MuiInputBase-input-83 MuiInput-input-68"
                        disabled={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        type="text"
                        value=""
                      />
                    </div>
                  </InputBase>
                </WithFormControlContext(InputBase)>
              </WithStyles(WithFormControlContext(InputBase))>
            </Input>
          </WithStyles(Input)>
          <WithStyles(WithFormControlContext(FormHelperText))>
            <WithFormControlContext(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained-94",
                  "disabled": "MuiFormHelperText-disabled-92",
                  "error": "MuiFormHelperText-error-91",
                  "filled": "MuiFormHelperText-filled-96",
                  "focused": "MuiFormHelperText-focused-95",
                  "marginDense": "MuiFormHelperText-marginDense-93",
                  "required": "MuiFormHelperText-required-97",
                  "root": "MuiFormHelperText-root-90",
                }
              }
            >
              <FormHelperText
                classes={
                  Object {
                    "contained": "MuiFormHelperText-contained-94",
                    "disabled": "MuiFormHelperText-disabled-92",
                    "error": "MuiFormHelperText-error-91",
                    "filled": "MuiFormHelperText-filled-96",
                    "focused": "MuiFormHelperText-focused-95",
                    "marginDense": "MuiFormHelperText-marginDense-93",
                    "required": "MuiFormHelperText-required-97",
                    "root": "MuiFormHelperText-root-90",
                  }
                }
                component="p"
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": false,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <p
                  className="MuiFormHelperText-root-90"
                >
                  A name for this track
                </p>
              </FormHelperText>
            </WithFormControlContext(FormHelperText)>
          </WithStyles(WithFormControlContext(FormHelperText))>
        </div>
      </FormControl>
    </WithStyles(FormControl)>
  </TextField>,
  <TextField
    fullWidth={true}
    helperText="A track type"
    label="trackType"
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "bamLocation": Object {
                "uri": "test.bam",
              },
              "index": Object {
                "location": Object {
                  "uri": "test.bam.bai",
                },
              },
              "type": "BamAdapter",
            },
          ],
          Array [
            Object {
              "target": Object {
                "value": "AlignmentsTrack",
              },
            },
          ],
          Array [
            Object {
              "type": "FromConfigAdapter",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    required={false}
    select={true}
    value="AlignmentsTrack"
    variant="standard"
  >
    <WithStyles(FormControl)
      fullWidth={true}
      required={false}
      variant="standard"
    >
      <FormControl
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth-41",
            "marginDense": "MuiFormControl-marginDense-40",
            "marginNormal": "MuiFormControl-marginNormal-39",
            "root": "MuiFormControl-root-38",
          }
        }
        component="div"
        disabled={false}
        error={false}
        fullWidth={true}
        margin="none"
        required={false}
        variant="standard"
      >
        <div
          className="MuiFormControl-root-38 MuiFormControl-fullWidth-41"
        >
          <WithStyles(WithFormControlContext(InputLabel))>
            <WithFormControlContext(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated-50",
                  "disabled": "MuiInputLabel-disabled-44",
                  "error": "MuiInputLabel-error-45",
                  "filled": "MuiInputLabel-filled-51",
                  "focused": "MuiInputLabel-focused-43",
                  "formControl": "MuiInputLabel-formControl-47",
                  "marginDense": "MuiInputLabel-marginDense-48",
                  "outlined": "MuiInputLabel-outlined-52",
                  "required": "MuiInputLabel-required-46",
                  "root": "MuiInputLabel-root-42",
                  "shrink": "MuiInputLabel-shrink-49",
                }
              }
            >
              <InputLabel
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-50",
                    "disabled": "MuiInputLabel-disabled-44",
                    "error": "MuiInputLabel-error-45",
                    "filled": "MuiInputLabel-filled-51",
                    "focused": "MuiInputLabel-focused-43",
                    "formControl": "MuiInputLabel-formControl-47",
                    "marginDense": "MuiInputLabel-marginDense-48",
                    "outlined": "MuiInputLabel-outlined-52",
                    "required": "MuiInputLabel-required-46",
                    "root": "MuiInputLabel-root-42",
                    "shrink": "MuiInputLabel-shrink-49",
                  }
                }
                disableAnimation={false}
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <WithStyles(WithFormControlContext(FormLabel))
                  className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                  classes={
                    Object {
                      "disabled": "MuiInputLabel-disabled-44",
                      "error": "MuiInputLabel-error-45",
                      "focused": "MuiInputLabel-focused-43",
                      "required": "MuiInputLabel-required-46",
                    }
                  }
                  data-shrink={true}
                >
                  <WithFormControlContext(FormLabel)
                    className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk-59",
                        "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                        "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                        "filled": "MuiFormLabel-filled-57",
                        "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                        "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                        "root": "MuiFormLabel-root-53",
                      }
                    }
                    data-shrink={true}
                  >
                    <FormLabel
                      className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-59",
                          "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                          "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                          "filled": "MuiFormLabel-filled-57",
                          "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                          "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                          "root": "MuiFormLabel-root-53",
                        }
                      }
                      component="label"
                      data-shrink={true}
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": true,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "standard",
                        }
                      }
                    >
                      <label
                        className="MuiFormLabel-root-53 MuiFormLabel-filled-57 MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                        data-shrink={true}
                      >
                        trackType
                      </label>
                    </FormLabel>
                  </WithFormControlContext(FormLabel)>
                </WithStyles(WithFormControlContext(FormLabel))>
              </InputLabel>
            </WithFormControlContext(InputLabel)>
          </WithStyles(WithFormControlContext(InputLabel))>
          <WithStyles(WithFormControlContext(Select))
            input={
              <WithStyles(Input)
                fullWidth={true}
                onChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "bamLocation": Object {
                            "uri": "test.bam",
                          },
                          "index": Object {
                            "location": Object {
                              "uri": "test.bam.bai",
                            },
                          },
                          "type": "BamAdapter",
                        },
                      ],
                      Array [
                        Object {
                          "target": Object {
                            "value": "AlignmentsTrack",
                          },
                        },
                      ],
                      Array [
                        Object {
                          "type": "FromConfigAdapter",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                value="AlignmentsTrack"
              />
            }
            value="AlignmentsTrack"
          >
            <WithFormControlContext(Select)
              classes={
                Object {
                  "disabled": "MuiSelect-disabled-103",
                  "filled": "MuiSelect-filled-100",
                  "icon": "MuiSelect-icon-104",
                  "outlined": "MuiSelect-outlined-101",
                  "root": "MuiSelect-root-98",
                  "select": "MuiSelect-select-99",
                  "selectMenu": "MuiSelect-selectMenu-102",
                }
              }
              input={
                <WithStyles(Input)
                  fullWidth={true}
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "bamLocation": Object {
                              "uri": "test.bam",
                            },
                            "index": Object {
                              "location": Object {
                                "uri": "test.bam.bai",
                              },
                            },
                            "type": "BamAdapter",
                          },
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": "AlignmentsTrack",
                            },
                          },
                        ],
                        Array [
                          Object {
                            "type": "FromConfigAdapter",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  value="AlignmentsTrack"
                />
              }
              value="AlignmentsTrack"
            >
              <Select
                IconComponent={[Function]}
                autoWidth={false}
                classes={
                  Object {
                    "disabled": "MuiSelect-disabled-103",
                    "filled": "MuiSelect-filled-100",
                    "icon": "MuiSelect-icon-104",
                    "outlined": "MuiSelect-outlined-101",
                    "root": "MuiSelect-root-98",
                    "select": "MuiSelect-select-99",
                    "selectMenu": "MuiSelect-selectMenu-102",
                  }
                }
                displayEmpty={false}
                input={
                  <WithStyles(Input)
                    fullWidth={true}
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {
                              "bamLocation": Object {
                                "uri": "test.bam",
                              },
                              "index": Object {
                                "location": Object {
                                  "uri": "test.bam.bai",
                                },
                              },
                              "type": "BamAdapter",
                            },
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": "AlignmentsTrack",
                              },
                            },
                          ],
                          Array [
                            Object {
                              "type": "FromConfigAdapter",
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    value="AlignmentsTrack"
                  />
                }
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
                multiple={false}
                native={false}
                value="AlignmentsTrack"
              >
                <WithStyles(Input)
                  fullWidth={true}
                  inputComponent={[Function]}
                  inputProps={
                    Object {
                      "IconComponent": [Function],
                      "MenuProps": undefined,
                      "SelectDisplayProps": undefined,
                      "autoWidth": false,
                      "children": Array [
                        <WithStyles(MenuItem)
                          value="BasicTrack"
                        >
                          BasicTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="DynamicTrack"
                        >
                          DynamicTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="AlignmentsTrack"
                        >
                          AlignmentsTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="SequenceTrack"
                        >
                          SequenceTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="ReferenceSequence"
                        >
                          ReferenceSequence
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="FilteringTrack"
                        >
                          FilteringTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="WiggleTrack"
                        >
                          WiggleTrack
                        </WithStyles(MenuItem)>,
                      ],
                      "classes": Object {
                        "disabled": "MuiSelect-disabled-103",
                        "filled": "MuiSelect-filled-100",
                        "icon": "MuiSelect-icon-104",
                        "outlined": "MuiSelect-outlined-101",
                        "root": "MuiSelect-root-98",
                        "select": "MuiSelect-select-99",
                        "selectMenu": "MuiSelect-selectMenu-102",
                      },
                      "displayEmpty": false,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "bamLocation": Object {
                              "uri": "test.bam",
                            },
                            "index": Object {
                              "location": Object {
                                "uri": "test.bam.bai",
                              },
                            },
                            "type": "BamAdapter",
                          },
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": "AlignmentsTrack",
                            },
                          },
                        ],
                        Array [
                          Object {
                            "type": "FromConfigAdapter",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  value="AlignmentsTrack"
                >
                  <Input
                    classes={
                      Object {
                        "disabled": "MuiInput-disabled-63",
                        "error": "MuiInput-error-65",
                        "focused": "MuiInput-focused-62",
                        "formControl": "MuiInput-formControl-61",
                        "fullWidth": "MuiInput-fullWidth-67",
                        "input": "MuiInput-input-68",
                        "inputMarginDense": "MuiInput-inputMarginDense-69",
                        "inputMultiline": "MuiInput-inputMultiline-70",
                        "inputType": "MuiInput-inputType-71",
                        "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                        "multiline": "MuiInput-multiline-66",
                        "root": "MuiInput-root-60",
                        "underline": "MuiInput-underline-64",
                      }
                    }
                    fullWidth={true}
                    inputComponent={[Function]}
                    inputProps={
                      Object {
                        "IconComponent": [Function],
                        "MenuProps": undefined,
                        "SelectDisplayProps": undefined,
                        "autoWidth": false,
                        "children": Array [
                          <WithStyles(MenuItem)
                            value="BasicTrack"
                          >
                            BasicTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="DynamicTrack"
                          >
                            DynamicTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="AlignmentsTrack"
                          >
                            AlignmentsTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="SequenceTrack"
                          >
                            SequenceTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="ReferenceSequence"
                          >
                            ReferenceSequence
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="FilteringTrack"
                          >
                            FilteringTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="WiggleTrack"
                          >
                            WiggleTrack
                          </WithStyles(MenuItem)>,
                        ],
                        "classes": Object {
                          "disabled": "MuiSelect-disabled-103",
                          "filled": "MuiSelect-filled-100",
                          "icon": "MuiSelect-icon-104",
                          "outlined": "MuiSelect-outlined-101",
                          "root": "MuiSelect-root-98",
                          "select": "MuiSelect-select-99",
                          "selectMenu": "MuiSelect-selectMenu-102",
                        },
                        "displayEmpty": false,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {
                              "bamLocation": Object {
                                "uri": "test.bam",
                              },
                              "index": Object {
                                "location": Object {
                                  "uri": "test.bam.bai",
                                },
                              },
                              "type": "BamAdapter",
                            },
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": "AlignmentsTrack",
                              },
                            },
                          ],
                          Array [
                            Object {
                              "type": "FromConfigAdapter",
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    value="AlignmentsTrack"
                  >
                    <WithStyles(WithFormControlContext(InputBase))
                      classes={
                        Object {
                          "disabled": "MuiInput-disabled-63",
                          "error": "MuiInput-error-65",
                          "focused": "MuiInput-focused-62",
                          "formControl": "MuiInput-formControl-61",
                          "fullWidth": "MuiInput-fullWidth-67",
                          "input": "MuiInput-input-68",
                          "inputMarginDense": "MuiInput-inputMarginDense-69",
                          "inputMultiline": "MuiInput-inputMultiline-70",
                          "inputType": "MuiInput-inputType-71",
                          "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                          "multiline": "MuiInput-multiline-66",
                          "root": "MuiInput-root-60 MuiInput-underline-64",
                          "underline": null,
                        }
                      }
                      fullWidth={true}
                      inputComponent={[Function]}
                      inputProps={
                        Object {
                          "IconComponent": [Function],
                          "MenuProps": undefined,
                          "SelectDisplayProps": undefined,
                          "autoWidth": false,
                          "children": Array [
                            <WithStyles(MenuItem)
                              value="BasicTrack"
                            >
                              BasicTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="DynamicTrack"
                            >
                              DynamicTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="AlignmentsTrack"
                            >
                              AlignmentsTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="SequenceTrack"
                            >
                              SequenceTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="ReferenceSequence"
                            >
                              ReferenceSequence
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="FilteringTrack"
                            >
                              FilteringTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="WiggleTrack"
                            >
                              WiggleTrack
                            </WithStyles(MenuItem)>,
                          ],
                          "classes": Object {
                            "disabled": "MuiSelect-disabled-103",
                            "filled": "MuiSelect-filled-100",
                            "icon": "MuiSelect-icon-104",
                            "outlined": "MuiSelect-outlined-101",
                            "root": "MuiSelect-root-98",
                            "select": "MuiSelect-select-99",
                            "selectMenu": "MuiSelect-selectMenu-102",
                          },
                          "displayEmpty": false,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      multiline={false}
                      onChange={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Object {
                                "bamLocation": Object {
                                  "uri": "test.bam",
                                },
                                "index": Object {
                                  "location": Object {
                                    "uri": "test.bam.bai",
                                  },
                                },
                                "type": "BamAdapter",
                              },
                            ],
                            Array [
                              Object {
                                "target": Object {
                                  "value": "AlignmentsTrack",
                                },
                              },
                            ],
                            Array [
                              Object {
                                "type": "FromConfigAdapter",
                              },
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      type="text"
                      value="AlignmentsTrack"
                    >
                      <WithFormControlContext(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd-78",
                            "adornedStart": "MuiInputBase-adornedStart-77",
                            "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                            "error": "MuiInputBase-error-79 MuiInput-error-65",
                            "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                            "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                            "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                            "input": "MuiInputBase-input-83 MuiInput-input-68",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                            "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                            "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                            "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                            "marginDense": "MuiInputBase-marginDense-80",
                            "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                            "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                          }
                        }
                        fullWidth={true}
                        inputComponent={[Function]}
                        inputProps={
                          Object {
                            "IconComponent": [Function],
                            "MenuProps": undefined,
                            "SelectDisplayProps": undefined,
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(MenuItem)
                                value="BasicTrack"
                              >
                                BasicTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="DynamicTrack"
                              >
                                DynamicTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="AlignmentsTrack"
                              >
                                AlignmentsTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="SequenceTrack"
                              >
                                SequenceTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="ReferenceSequence"
                              >
                                ReferenceSequence
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="FilteringTrack"
                              >
                                FilteringTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="WiggleTrack"
                              >
                                WiggleTrack
                              </WithStyles(MenuItem)>,
                            ],
                            "classes": Object {
                              "disabled": "MuiSelect-disabled-103",
                              "filled": "MuiSelect-filled-100",
                              "icon": "MuiSelect-icon-104",
                              "outlined": "MuiSelect-outlined-101",
                              "root": "MuiSelect-root-98",
                              "select": "MuiSelect-select-99",
                              "selectMenu": "MuiSelect-selectMenu-102",
                            },
                            "displayEmpty": false,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        multiline={false}
                        onChange={
                          [MockFunction] {
                            "calls": Array [
                              Array [
                                Object {
                                  "bamLocation": Object {
                                    "uri": "test.bam",
                                  },
                                  "index": Object {
                                    "location": Object {
                                      "uri": "test.bam.bai",
                                    },
                                  },
                                  "type": "BamAdapter",
                                },
                              ],
                              Array [
                                Object {
                                  "target": Object {
                                    "value": "AlignmentsTrack",
                                  },
                                },
                              ],
                              Array [
                                Object {
                                  "type": "FromConfigAdapter",
                                },
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        type="text"
                        value="AlignmentsTrack"
                      >
                        <InputBase
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd-78",
                              "adornedStart": "MuiInputBase-adornedStart-77",
                              "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                              "error": "MuiInputBase-error-79 MuiInput-error-65",
                              "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                              "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                              "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                              "input": "MuiInputBase-input-83 MuiInput-input-68",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                              "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                              "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                              "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                              "marginDense": "MuiInputBase-marginDense-80",
                              "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                              "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                            }
                          }
                          fullWidth={true}
                          inputComponent={[Function]}
                          inputProps={
                            Object {
                              "IconComponent": [Function],
                              "MenuProps": undefined,
                              "SelectDisplayProps": undefined,
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(MenuItem)
                                  value="BasicTrack"
                                >
                                  BasicTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="DynamicTrack"
                                >
                                  DynamicTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="AlignmentsTrack"
                                >
                                  AlignmentsTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="SequenceTrack"
                                >
                                  SequenceTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="ReferenceSequence"
                                >
                                  ReferenceSequence
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="FilteringTrack"
                                >
                                  FilteringTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="WiggleTrack"
                                >
                                  WiggleTrack
                                </WithStyles(MenuItem)>,
                              ],
                              "classes": Object {
                                "disabled": "MuiSelect-disabled-103",
                                "filled": "MuiSelect-filled-100",
                                "icon": "MuiSelect-icon-104",
                                "outlined": "MuiSelect-outlined-101",
                                "root": "MuiSelect-root-98",
                                "select": "MuiSelect-select-99",
                                "selectMenu": "MuiSelect-selectMenu-102",
                              },
                              "displayEmpty": false,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          muiFormControl={
                            Object {
                              "adornedStart": false,
                              "disabled": false,
                              "error": false,
                              "filled": true,
                              "focused": false,
                              "margin": "none",
                              "onBlur": [Function],
                              "onEmpty": [Function],
                              "onFilled": [Function],
                              "onFocus": [Function],
                              "required": false,
                              "variant": "standard",
                            }
                          }
                          multiline={false}
                          onChange={
                            [MockFunction] {
                              "calls": Array [
                                Array [
                                  Object {
                                    "bamLocation": Object {
                                      "uri": "test.bam",
                                    },
                                    "index": Object {
                                      "location": Object {
                                        "uri": "test.bam.bai",
                                      },
                                    },
                                    "type": "BamAdapter",
                                  },
                                ],
                                Array [
                                  Object {
                                    "target": Object {
                                      "value": "AlignmentsTrack",
                                    },
                                  },
                                ],
                                Array [
                                  Object {
                                    "type": "FromConfigAdapter",
                                  },
                                ],
                              ],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          type="text"
                          value="AlignmentsTrack"
                        >
                          <div
                            className="MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64 MuiInputBase-fullWidth-82 MuiInput-fullWidth-67 MuiInputBase-formControl-74 MuiInput-formControl-61"
                            onClick={[Function]}
                          >
                            <SelectInput
                              IconComponent={[Function]}
                              aria-invalid={false}
                              autoWidth={false}
                              className="MuiInputBase-input-83 MuiInput-input-68"
                              classes={
                                Object {
                                  "disabled": "MuiSelect-disabled-103",
                                  "filled": "MuiSelect-filled-100",
                                  "icon": "MuiSelect-icon-104",
                                  "outlined": "MuiSelect-outlined-101",
                                  "root": "MuiSelect-root-98",
                                  "select": "MuiSelect-select-99",
                                  "selectMenu": "MuiSelect-selectMenu-102",
                                }
                              }
                              disabled={false}
                              displayEmpty={false}
                              inputRef={[Function]}
                              multiple={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              value="AlignmentsTrack"
                              variant="standard"
                            >
                              <div
                                className="MuiSelect-root-98"
                              >
                                <div
                                  aria-haspopup="true"
                                  aria-pressed="false"
                                  className="MuiSelect-select-99 MuiSelect-selectMenu-102 MuiInputBase-input-83 MuiInput-input-68"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  tabIndex={0}
                                >
                                  AlignmentsTrack
                                </div>
                                <input
                                  type="hidden"
                                  value="AlignmentsTrack"
                                />
                                <pure(ArrowDropDown)
                                  className="MuiSelect-icon-104"
                                >
                                  <ArrowDropDown
                                    className="MuiSelect-icon-104"
                                  >
                                    <WithStyles(SvgIcon)
                                      className="MuiSelect-icon-104"
                                    >
                                      <SvgIcon
                                        className="MuiSelect-icon-104"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction-108",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled-110",
                                            "colorError": "MuiSvgIcon-colorError-109",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary-106",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary-107",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-111",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-113",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-112",
                                            "root": "MuiSvgIcon-root-105",
                                          }
                                        }
                                        color="inherit"
                                        component="svg"
                                        fontSize="default"
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root-105 MuiSelect-icon-104"
                                          focusable="false"
                                          role="presentation"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </SvgIcon>
                                    </WithStyles(SvgIcon)>
                                  </ArrowDropDown>
                                </pure(ArrowDropDown)>
                                <WithStyles(Menu)
                                  MenuListProps={
                                    Object {
                                      "disableListWrap": true,
                                      "role": "listbox",
                                    }
                                  }
                                  PaperProps={
                                    Object {
                                      "style": Object {
                                        "minWidth": null,
                                      },
                                    }
                                  }
                                  id="menu-"
                                  onClose={[Function]}
                                  open={false}
                                >
                                  <Menu
                                    MenuListProps={
                                      Object {
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": null,
                                        },
                                      }
                                    }
                                    classes={
                                      Object {
                                        "paper": "MuiMenu-paper-114",
                                      }
                                    }
                                    disableAutoFocusItem={false}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                    theme={
                                      Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "hover": "rgba(0, 0, 0, 0.08)",
                                            "hoverOpacity": 0.08,
                                            "selected": "rgba(0, 0, 0, 0.14)",
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                          "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                          "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": Object {
                                          "unit": 8,
                                        },
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.46429em",
                                          },
                                          "body1Next": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "lineHeight": "1.71429em",
                                          },
                                          "body2Next": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.5,
                                          },
                                          "button": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "textTransform": "uppercase",
                                          },
                                          "buttonNext": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.375em",
                                          },
                                          "captionNext": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "display1": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.20588em",
                                          },
                                          "display2": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.8125rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.13333em",
                                            "marginLeft": "-.02em",
                                          },
                                          "display3": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "-.02em",
                                            "lineHeight": "1.30357em",
                                            "marginLeft": "-.02em",
                                          },
                                          "display4": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "7rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-.04em",
                                            "lineHeight": "1.14286em",
                                            "marginLeft": "-.04em",
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1,
                                          },
                                          "h2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1,
                                          },
                                          "h3": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.04,
                                          },
                                          "h4": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.17,
                                          },
                                          "h5": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.33,
                                          },
                                          "h6": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "headline": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.35417em",
                                          },
                                          "overline": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subheading": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.5em",
                                          },
                                          "subtitle1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                          "title": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.3125rem",
                                            "fontWeight": 500,
                                            "lineHeight": "1.16667em",
                                          },
                                          "useNextVariants": false,
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "tooltip": 1500,
                                        },
                                      }
                                    }
                                    transitionDuration="auto"
                                  >
                                    <WithStyles(Popover)
                                      PaperProps={
                                        Object {
                                          "classes": Object {
                                            "root": "MuiMenu-paper-114",
                                          },
                                          "style": Object {
                                            "minWidth": null,
                                          },
                                        }
                                      }
                                      anchorOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      getContentAnchorEl={[Function]}
                                      id="menu-"
                                      onClose={[Function]}
                                      onEntering={[Function]}
                                      open={false}
                                      transformOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      transitionDuration="auto"
                                    >
                                      <Popover
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper-114",
                                            },
                                            "style": Object {
                                              "minWidth": null,
                                            },
                                          }
                                        }
                                        TransitionComponent={[Function]}
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        anchorReference="anchorEl"
                                        classes={
                                          Object {
                                            "paper": "MuiPopover-paper-115",
                                          }
                                        }
                                        elevation={8}
                                        getContentAnchorEl={[Function]}
                                        id="menu-"
                                        marginThreshold={16}
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <WithStyles(Modal)
                                          BackdropProps={
                                            Object {
                                              "invisible": true,
                                            }
                                          }
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                        >
                                          <Modal
                                            BackdropComponent={[Function]}
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            classes={
                                              Object {
                                                "hidden": "MuiModal-hidden-117",
                                                "root": "MuiModal-root-116",
                                              }
                                            }
                                            closeAfterTransition={false}
                                            disableAutoFocus={false}
                                            disableBackdropClick={false}
                                            disableEnforceFocus={false}
                                            disableEscapeKeyDown={false}
                                            disablePortal={false}
                                            disableRestoreFocus={false}
                                            hideBackdrop={false}
                                            id="menu-"
                                            keepMounted={false}
                                            manager={
                                              ModalManager {
                                                "data": Array [],
                                                "handleContainerOverflow": true,
                                                "hideSiblingNodes": true,
                                                "modals": Array [],
                                              }
                                            }
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </WithStyles(Modal)>
                                      </Popover>
                                    </WithStyles(Popover)>
                                  </Menu>
                                </WithStyles(Menu)>
                              </div>
                            </SelectInput>
                          </div>
                        </InputBase>
                      </WithFormControlContext(InputBase)>
                    </WithStyles(WithFormControlContext(InputBase))>
                  </Input>
                </WithStyles(Input)>
              </Select>
            </WithFormControlContext(Select)>
          </WithStyles(WithFormControlContext(Select))>
          <WithStyles(WithFormControlContext(FormHelperText))>
            <WithFormControlContext(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained-94",
                  "disabled": "MuiFormHelperText-disabled-92",
                  "error": "MuiFormHelperText-error-91",
                  "filled": "MuiFormHelperText-filled-96",
                  "focused": "MuiFormHelperText-focused-95",
                  "marginDense": "MuiFormHelperText-marginDense-93",
                  "required": "MuiFormHelperText-required-97",
                  "root": "MuiFormHelperText-root-90",
                }
              }
            >
              <FormHelperText
                classes={
                  Object {
                    "contained": "MuiFormHelperText-contained-94",
                    "disabled": "MuiFormHelperText-disabled-92",
                    "error": "MuiFormHelperText-error-91",
                    "filled": "MuiFormHelperText-filled-96",
                    "focused": "MuiFormHelperText-focused-95",
                    "marginDense": "MuiFormHelperText-marginDense-93",
                    "required": "MuiFormHelperText-required-97",
                    "root": "MuiFormHelperText-root-90",
                  }
                }
                component="p"
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <p
                  className="MuiFormHelperText-root-90 MuiFormHelperText-filled-96"
                >
                  A track type
                </p>
              </FormHelperText>
            </WithFormControlContext(FormHelperText)>
          </WithStyles(WithFormControlContext(FormHelperText))>
        </div>
      </FormControl>
    </WithStyles(FormControl)>
  </TextField>,
]
`;

exports[`<ConfirmTrack /> mounts with localPath 1`] = `
Array [
  <WithStyles(Typography)
    className="ConfirmTrack-spacing-1"
  >
    <Typography
      align="inherit"
      className="ConfirmTrack-spacing-1"
      classes={
        Object {
          "alignCenter": "MuiTypography-alignCenter-25",
          "alignJustify": "MuiTypography-alignJustify-27",
          "alignLeft": "MuiTypography-alignLeft-24",
          "alignRight": "MuiTypography-alignRight-26",
          "body1": "MuiTypography-body1-11",
          "body2": "MuiTypography-body2-10",
          "button": "MuiTypography-button-13",
          "caption": "MuiTypography-caption-12",
          "colorError": "MuiTypography-colorError-36",
          "colorInherit": "MuiTypography-colorInherit-31",
          "colorPrimary": "MuiTypography-colorPrimary-32",
          "colorSecondary": "MuiTypography-colorSecondary-33",
          "colorTextPrimary": "MuiTypography-colorTextPrimary-34",
          "colorTextSecondary": "MuiTypography-colorTextSecondary-35",
          "display1": "MuiTypography-display1-6",
          "display2": "MuiTypography-display2-5",
          "display3": "MuiTypography-display3-4",
          "display4": "MuiTypography-display4-3",
          "gutterBottom": "MuiTypography-gutterBottom-29",
          "h1": "MuiTypography-h1-14",
          "h2": "MuiTypography-h2-15",
          "h3": "MuiTypography-h3-16",
          "h4": "MuiTypography-h4-17",
          "h5": "MuiTypography-h5-18",
          "h6": "MuiTypography-h6-19",
          "headline": "MuiTypography-headline-7",
          "inline": "MuiTypography-inline-37",
          "noWrap": "MuiTypography-noWrap-28",
          "overline": "MuiTypography-overline-22",
          "paragraph": "MuiTypography-paragraph-30",
          "root": "MuiTypography-root-2",
          "srOnly": "MuiTypography-srOnly-23",
          "subheading": "MuiTypography-subheading-9",
          "subtitle1": "MuiTypography-subtitle1-20",
          "subtitle2": "MuiTypography-subtitle2-21",
          "title": "MuiTypography-title-8",
        }
      }
      color="default"
      gutterBottom={false}
      headlineMapping={
        Object {
          "body1": "p",
          "body2": "p",
          "display1": "h1",
          "display2": "h1",
          "display3": "h1",
          "display4": "h1",
          "h1": "h1",
          "h2": "h2",
          "h3": "h3",
          "h4": "h4",
          "h5": "h5",
          "h6": "h6",
          "headline": "h1",
          "subheading": "h3",
          "subtitle1": "h6",
          "subtitle2": "h6",
          "title": "h2",
        }
      }
      inline={false}
      noWrap={false}
      paragraph={false}
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "hover": "rgba(0, 0, 0, 0.08)",
              "hoverOpacity": 0.08,
              "selected": "rgba(0, 0, 0, 0.14)",
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "#303f9f",
              "light": "#7986cb",
              "main": "#3f51b5",
            },
            "secondary": Object {
              "contrastText": "#fff",
              "dark": "#c51162",
              "light": "#ff4081",
              "main": "#f50057",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
            "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
            "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": Object {
            "unit": 8,
          },
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": "1.46429em",
            },
            "body1Next": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": "1.71429em",
            },
            "body2Next": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.5,
            },
            "button": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "textTransform": "uppercase",
            },
            "buttonNext": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": "1.375em",
            },
            "captionNext": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "display1": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": "1.20588em",
            },
            "display2": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.8125rem",
              "fontWeight": 400,
              "lineHeight": "1.13333em",
              "marginLeft": "-.02em",
            },
            "display3": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.5rem",
              "fontWeight": 400,
              "letterSpacing": "-.02em",
              "lineHeight": "1.30357em",
              "marginLeft": "-.02em",
            },
            "display4": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "7rem",
              "fontWeight": 300,
              "letterSpacing": "-.04em",
              "lineHeight": "1.14286em",
              "marginLeft": "-.04em",
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1,
            },
            "h2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1,
            },
            "h3": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.04,
            },
            "h4": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.17,
            },
            "h5": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.33,
            },
            "h6": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.25rem",
              "fontWeight": 500,
              "letterSpacing": "0.0075em",
              "lineHeight": 1.6,
            },
            "headline": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": "1.35417em",
            },
            "overline": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subheading": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": "1.5em",
            },
            "subtitle1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
            "title": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.3125rem",
              "fontWeight": 500,
              "lineHeight": "1.16667em",
            },
            "useNextVariants": false,
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "tooltip": 1500,
          },
        }
      }
    >
      <p
        className="MuiTypography-root-2 MuiTypography-body1-11 ConfirmTrack-spacing-1"
      >
        Using adapter 
        <code>
          BamAdapter
        </code>
         and guessing track type 
        <code>
          AlignmentsTrack
        </code>
        . Please enter a track name and, if necessary, update the track type.
      </p>
    </Typography>
  </WithStyles(Typography)>,
  <TextField
    className="ConfirmTrack-spacing-1"
    fullWidth={true}
    helperText="A name for this track"
    label="trackName"
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {},
          ],
          Array [
            Object {
              "target": Object {
                "value": undefined,
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    required={false}
    select={false}
    value=""
    variant="standard"
  >
    <WithStyles(FormControl)
      className="ConfirmTrack-spacing-1"
      fullWidth={true}
      required={false}
      variant="standard"
    >
      <FormControl
        className="ConfirmTrack-spacing-1"
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth-41",
            "marginDense": "MuiFormControl-marginDense-40",
            "marginNormal": "MuiFormControl-marginNormal-39",
            "root": "MuiFormControl-root-38",
          }
        }
        component="div"
        disabled={false}
        error={false}
        fullWidth={true}
        margin="none"
        required={false}
        variant="standard"
      >
        <div
          className="MuiFormControl-root-38 MuiFormControl-fullWidth-41 ConfirmTrack-spacing-1"
        >
          <WithStyles(WithFormControlContext(InputLabel))>
            <WithFormControlContext(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated-50",
                  "disabled": "MuiInputLabel-disabled-44",
                  "error": "MuiInputLabel-error-45",
                  "filled": "MuiInputLabel-filled-51",
                  "focused": "MuiInputLabel-focused-43",
                  "formControl": "MuiInputLabel-formControl-47",
                  "marginDense": "MuiInputLabel-marginDense-48",
                  "outlined": "MuiInputLabel-outlined-52",
                  "required": "MuiInputLabel-required-46",
                  "root": "MuiInputLabel-root-42",
                  "shrink": "MuiInputLabel-shrink-49",
                }
              }
            >
              <InputLabel
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-50",
                    "disabled": "MuiInputLabel-disabled-44",
                    "error": "MuiInputLabel-error-45",
                    "filled": "MuiInputLabel-filled-51",
                    "focused": "MuiInputLabel-focused-43",
                    "formControl": "MuiInputLabel-formControl-47",
                    "marginDense": "MuiInputLabel-marginDense-48",
                    "outlined": "MuiInputLabel-outlined-52",
                    "required": "MuiInputLabel-required-46",
                    "root": "MuiInputLabel-root-42",
                    "shrink": "MuiInputLabel-shrink-49",
                  }
                }
                disableAnimation={false}
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": false,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <WithStyles(WithFormControlContext(FormLabel))
                  className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                  classes={
                    Object {
                      "disabled": "MuiInputLabel-disabled-44",
                      "error": "MuiInputLabel-error-45",
                      "focused": "MuiInputLabel-focused-43",
                      "required": "MuiInputLabel-required-46",
                    }
                  }
                  data-shrink={false}
                >
                  <WithFormControlContext(FormLabel)
                    className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk-59",
                        "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                        "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                        "filled": "MuiFormLabel-filled-57",
                        "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                        "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                        "root": "MuiFormLabel-root-53",
                      }
                    }
                    data-shrink={false}
                  >
                    <FormLabel
                      className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-59",
                          "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                          "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                          "filled": "MuiFormLabel-filled-57",
                          "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                          "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                          "root": "MuiFormLabel-root-53",
                        }
                      }
                      component="label"
                      data-shrink={false}
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": false,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "standard",
                        }
                      }
                    >
                      <label
                        className="MuiFormLabel-root-53 MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                        data-shrink={false}
                      >
                        trackName
                      </label>
                    </FormLabel>
                  </WithFormControlContext(FormLabel)>
                </WithStyles(WithFormControlContext(FormLabel))>
              </InputLabel>
            </WithFormControlContext(InputLabel)>
          </WithStyles(WithFormControlContext(InputLabel))>
          <WithStyles(Input)
            fullWidth={true}
            onChange={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                  Array [
                    Object {
                      "target": Object {
                        "value": undefined,
                      },
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            value=""
          >
            <Input
              classes={
                Object {
                  "disabled": "MuiInput-disabled-63",
                  "error": "MuiInput-error-65",
                  "focused": "MuiInput-focused-62",
                  "formControl": "MuiInput-formControl-61",
                  "fullWidth": "MuiInput-fullWidth-67",
                  "input": "MuiInput-input-68",
                  "inputMarginDense": "MuiInput-inputMarginDense-69",
                  "inputMultiline": "MuiInput-inputMultiline-70",
                  "inputType": "MuiInput-inputType-71",
                  "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                  "multiline": "MuiInput-multiline-66",
                  "root": "MuiInput-root-60",
                  "underline": "MuiInput-underline-64",
                }
              }
              fullWidth={true}
              onChange={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {},
                    ],
                    Array [
                      Object {
                        "target": Object {
                          "value": undefined,
                        },
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
              value=""
            >
              <WithStyles(WithFormControlContext(InputBase))
                classes={
                  Object {
                    "disabled": "MuiInput-disabled-63",
                    "error": "MuiInput-error-65",
                    "focused": "MuiInput-focused-62",
                    "formControl": "MuiInput-formControl-61",
                    "fullWidth": "MuiInput-fullWidth-67",
                    "input": "MuiInput-input-68",
                    "inputMarginDense": "MuiInput-inputMarginDense-69",
                    "inputMultiline": "MuiInput-inputMultiline-70",
                    "inputType": "MuiInput-inputType-71",
                    "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                    "multiline": "MuiInput-multiline-66",
                    "root": "MuiInput-root-60 MuiInput-underline-64",
                    "underline": null,
                  }
                }
                fullWidth={true}
                inputComponent="input"
                multiline={false}
                onChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                      Array [
                        Object {
                          "target": Object {
                            "value": undefined,
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                type="text"
                value=""
              >
                <WithFormControlContext(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd-78",
                      "adornedStart": "MuiInputBase-adornedStart-77",
                      "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                      "error": "MuiInputBase-error-79 MuiInput-error-65",
                      "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                      "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                      "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                      "input": "MuiInputBase-input-83 MuiInput-input-68",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                      "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                      "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                      "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                      "marginDense": "MuiInputBase-marginDense-80",
                      "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                      "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                    }
                  }
                  fullWidth={true}
                  inputComponent="input"
                  multiline={false}
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": undefined,
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  type="text"
                  value=""
                >
                  <InputBase
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd-78",
                        "adornedStart": "MuiInputBase-adornedStart-77",
                        "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                        "error": "MuiInputBase-error-79 MuiInput-error-65",
                        "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                        "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                        "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                        "input": "MuiInputBase-input-83 MuiInput-input-68",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                        "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                        "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                        "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                        "marginDense": "MuiInputBase-marginDense-80",
                        "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                        "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                      }
                    }
                    fullWidth={true}
                    inputComponent="input"
                    muiFormControl={
                      Object {
                        "adornedStart": false,
                        "disabled": false,
                        "error": false,
                        "filled": false,
                        "focused": false,
                        "margin": "none",
                        "onBlur": [Function],
                        "onEmpty": [Function],
                        "onFilled": [Function],
                        "onFocus": [Function],
                        "required": false,
                        "variant": "standard",
                      }
                    }
                    multiline={false}
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {},
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": undefined,
                              },
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    type="text"
                    value=""
                  >
                    <div
                      className="MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64 MuiInputBase-fullWidth-82 MuiInput-fullWidth-67 MuiInputBase-formControl-74 MuiInput-formControl-61"
                      onClick={[Function]}
                    >
                      <input
                        aria-invalid={false}
                        className="MuiInputBase-input-83 MuiInput-input-68"
                        disabled={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        type="text"
                        value=""
                      />
                    </div>
                  </InputBase>
                </WithFormControlContext(InputBase)>
              </WithStyles(WithFormControlContext(InputBase))>
            </Input>
          </WithStyles(Input)>
          <WithStyles(WithFormControlContext(FormHelperText))>
            <WithFormControlContext(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained-94",
                  "disabled": "MuiFormHelperText-disabled-92",
                  "error": "MuiFormHelperText-error-91",
                  "filled": "MuiFormHelperText-filled-96",
                  "focused": "MuiFormHelperText-focused-95",
                  "marginDense": "MuiFormHelperText-marginDense-93",
                  "required": "MuiFormHelperText-required-97",
                  "root": "MuiFormHelperText-root-90",
                }
              }
            >
              <FormHelperText
                classes={
                  Object {
                    "contained": "MuiFormHelperText-contained-94",
                    "disabled": "MuiFormHelperText-disabled-92",
                    "error": "MuiFormHelperText-error-91",
                    "filled": "MuiFormHelperText-filled-96",
                    "focused": "MuiFormHelperText-focused-95",
                    "marginDense": "MuiFormHelperText-marginDense-93",
                    "required": "MuiFormHelperText-required-97",
                    "root": "MuiFormHelperText-root-90",
                  }
                }
                component="p"
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": false,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <p
                  className="MuiFormHelperText-root-90"
                >
                  A name for this track
                </p>
              </FormHelperText>
            </WithFormControlContext(FormHelperText)>
          </WithStyles(WithFormControlContext(FormHelperText))>
        </div>
      </FormControl>
    </WithStyles(FormControl)>
  </TextField>,
  <TextField
    fullWidth={true}
    helperText="A track type"
    label="trackType"
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {},
          ],
          Array [
            Object {
              "target": Object {
                "value": undefined,
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    required={false}
    select={true}
    value="AlignmentsTrack"
    variant="standard"
  >
    <WithStyles(FormControl)
      fullWidth={true}
      required={false}
      variant="standard"
    >
      <FormControl
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth-41",
            "marginDense": "MuiFormControl-marginDense-40",
            "marginNormal": "MuiFormControl-marginNormal-39",
            "root": "MuiFormControl-root-38",
          }
        }
        component="div"
        disabled={false}
        error={false}
        fullWidth={true}
        margin="none"
        required={false}
        variant="standard"
      >
        <div
          className="MuiFormControl-root-38 MuiFormControl-fullWidth-41"
        >
          <WithStyles(WithFormControlContext(InputLabel))>
            <WithFormControlContext(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated-50",
                  "disabled": "MuiInputLabel-disabled-44",
                  "error": "MuiInputLabel-error-45",
                  "filled": "MuiInputLabel-filled-51",
                  "focused": "MuiInputLabel-focused-43",
                  "formControl": "MuiInputLabel-formControl-47",
                  "marginDense": "MuiInputLabel-marginDense-48",
                  "outlined": "MuiInputLabel-outlined-52",
                  "required": "MuiInputLabel-required-46",
                  "root": "MuiInputLabel-root-42",
                  "shrink": "MuiInputLabel-shrink-49",
                }
              }
            >
              <InputLabel
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-50",
                    "disabled": "MuiInputLabel-disabled-44",
                    "error": "MuiInputLabel-error-45",
                    "filled": "MuiInputLabel-filled-51",
                    "focused": "MuiInputLabel-focused-43",
                    "formControl": "MuiInputLabel-formControl-47",
                    "marginDense": "MuiInputLabel-marginDense-48",
                    "outlined": "MuiInputLabel-outlined-52",
                    "required": "MuiInputLabel-required-46",
                    "root": "MuiInputLabel-root-42",
                    "shrink": "MuiInputLabel-shrink-49",
                  }
                }
                disableAnimation={false}
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <WithStyles(WithFormControlContext(FormLabel))
                  className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                  classes={
                    Object {
                      "disabled": "MuiInputLabel-disabled-44",
                      "error": "MuiInputLabel-error-45",
                      "focused": "MuiInputLabel-focused-43",
                      "required": "MuiInputLabel-required-46",
                    }
                  }
                  data-shrink={true}
                >
                  <WithFormControlContext(FormLabel)
                    className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk-59",
                        "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                        "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                        "filled": "MuiFormLabel-filled-57",
                        "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                        "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                        "root": "MuiFormLabel-root-53",
                      }
                    }
                    data-shrink={true}
                  >
                    <FormLabel
                      className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-59",
                          "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                          "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                          "filled": "MuiFormLabel-filled-57",
                          "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                          "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                          "root": "MuiFormLabel-root-53",
                        }
                      }
                      component="label"
                      data-shrink={true}
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": true,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "standard",
                        }
                      }
                    >
                      <label
                        className="MuiFormLabel-root-53 MuiFormLabel-filled-57 MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                        data-shrink={true}
                      >
                        trackType
                      </label>
                    </FormLabel>
                  </WithFormControlContext(FormLabel)>
                </WithStyles(WithFormControlContext(FormLabel))>
              </InputLabel>
            </WithFormControlContext(InputLabel)>
          </WithStyles(WithFormControlContext(InputLabel))>
          <WithStyles(WithFormControlContext(Select))
            input={
              <WithStyles(Input)
                fullWidth={true}
                onChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                      Array [
                        Object {
                          "target": Object {
                            "value": undefined,
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                value="AlignmentsTrack"
              />
            }
            value="AlignmentsTrack"
          >
            <WithFormControlContext(Select)
              classes={
                Object {
                  "disabled": "MuiSelect-disabled-103",
                  "filled": "MuiSelect-filled-100",
                  "icon": "MuiSelect-icon-104",
                  "outlined": "MuiSelect-outlined-101",
                  "root": "MuiSelect-root-98",
                  "select": "MuiSelect-select-99",
                  "selectMenu": "MuiSelect-selectMenu-102",
                }
              }
              input={
                <WithStyles(Input)
                  fullWidth={true}
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": undefined,
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  value="AlignmentsTrack"
                />
              }
              value="AlignmentsTrack"
            >
              <Select
                IconComponent={[Function]}
                autoWidth={false}
                classes={
                  Object {
                    "disabled": "MuiSelect-disabled-103",
                    "filled": "MuiSelect-filled-100",
                    "icon": "MuiSelect-icon-104",
                    "outlined": "MuiSelect-outlined-101",
                    "root": "MuiSelect-root-98",
                    "select": "MuiSelect-select-99",
                    "selectMenu": "MuiSelect-selectMenu-102",
                  }
                }
                displayEmpty={false}
                input={
                  <WithStyles(Input)
                    fullWidth={true}
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {},
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": undefined,
                              },
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    value="AlignmentsTrack"
                  />
                }
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
                multiple={false}
                native={false}
                value="AlignmentsTrack"
              >
                <WithStyles(Input)
                  fullWidth={true}
                  inputComponent={[Function]}
                  inputProps={
                    Object {
                      "IconComponent": [Function],
                      "MenuProps": undefined,
                      "SelectDisplayProps": undefined,
                      "autoWidth": false,
                      "children": Array [
                        <WithStyles(MenuItem)
                          value="BasicTrack"
                        >
                          BasicTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="DynamicTrack"
                        >
                          DynamicTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="AlignmentsTrack"
                        >
                          AlignmentsTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="SequenceTrack"
                        >
                          SequenceTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="ReferenceSequence"
                        >
                          ReferenceSequence
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="FilteringTrack"
                        >
                          FilteringTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="WiggleTrack"
                        >
                          WiggleTrack
                        </WithStyles(MenuItem)>,
                      ],
                      "classes": Object {
                        "disabled": "MuiSelect-disabled-103",
                        "filled": "MuiSelect-filled-100",
                        "icon": "MuiSelect-icon-104",
                        "outlined": "MuiSelect-outlined-101",
                        "root": "MuiSelect-root-98",
                        "select": "MuiSelect-select-99",
                        "selectMenu": "MuiSelect-selectMenu-102",
                      },
                      "displayEmpty": false,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": undefined,
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  value="AlignmentsTrack"
                >
                  <Input
                    classes={
                      Object {
                        "disabled": "MuiInput-disabled-63",
                        "error": "MuiInput-error-65",
                        "focused": "MuiInput-focused-62",
                        "formControl": "MuiInput-formControl-61",
                        "fullWidth": "MuiInput-fullWidth-67",
                        "input": "MuiInput-input-68",
                        "inputMarginDense": "MuiInput-inputMarginDense-69",
                        "inputMultiline": "MuiInput-inputMultiline-70",
                        "inputType": "MuiInput-inputType-71",
                        "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                        "multiline": "MuiInput-multiline-66",
                        "root": "MuiInput-root-60",
                        "underline": "MuiInput-underline-64",
                      }
                    }
                    fullWidth={true}
                    inputComponent={[Function]}
                    inputProps={
                      Object {
                        "IconComponent": [Function],
                        "MenuProps": undefined,
                        "SelectDisplayProps": undefined,
                        "autoWidth": false,
                        "children": Array [
                          <WithStyles(MenuItem)
                            value="BasicTrack"
                          >
                            BasicTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="DynamicTrack"
                          >
                            DynamicTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="AlignmentsTrack"
                          >
                            AlignmentsTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="SequenceTrack"
                          >
                            SequenceTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="ReferenceSequence"
                          >
                            ReferenceSequence
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="FilteringTrack"
                          >
                            FilteringTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="WiggleTrack"
                          >
                            WiggleTrack
                          </WithStyles(MenuItem)>,
                        ],
                        "classes": Object {
                          "disabled": "MuiSelect-disabled-103",
                          "filled": "MuiSelect-filled-100",
                          "icon": "MuiSelect-icon-104",
                          "outlined": "MuiSelect-outlined-101",
                          "root": "MuiSelect-root-98",
                          "select": "MuiSelect-select-99",
                          "selectMenu": "MuiSelect-selectMenu-102",
                        },
                        "displayEmpty": false,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {},
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": undefined,
                              },
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    value="AlignmentsTrack"
                  >
                    <WithStyles(WithFormControlContext(InputBase))
                      classes={
                        Object {
                          "disabled": "MuiInput-disabled-63",
                          "error": "MuiInput-error-65",
                          "focused": "MuiInput-focused-62",
                          "formControl": "MuiInput-formControl-61",
                          "fullWidth": "MuiInput-fullWidth-67",
                          "input": "MuiInput-input-68",
                          "inputMarginDense": "MuiInput-inputMarginDense-69",
                          "inputMultiline": "MuiInput-inputMultiline-70",
                          "inputType": "MuiInput-inputType-71",
                          "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                          "multiline": "MuiInput-multiline-66",
                          "root": "MuiInput-root-60 MuiInput-underline-64",
                          "underline": null,
                        }
                      }
                      fullWidth={true}
                      inputComponent={[Function]}
                      inputProps={
                        Object {
                          "IconComponent": [Function],
                          "MenuProps": undefined,
                          "SelectDisplayProps": undefined,
                          "autoWidth": false,
                          "children": Array [
                            <WithStyles(MenuItem)
                              value="BasicTrack"
                            >
                              BasicTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="DynamicTrack"
                            >
                              DynamicTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="AlignmentsTrack"
                            >
                              AlignmentsTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="SequenceTrack"
                            >
                              SequenceTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="ReferenceSequence"
                            >
                              ReferenceSequence
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="FilteringTrack"
                            >
                              FilteringTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="WiggleTrack"
                            >
                              WiggleTrack
                            </WithStyles(MenuItem)>,
                          ],
                          "classes": Object {
                            "disabled": "MuiSelect-disabled-103",
                            "filled": "MuiSelect-filled-100",
                            "icon": "MuiSelect-icon-104",
                            "outlined": "MuiSelect-outlined-101",
                            "root": "MuiSelect-root-98",
                            "select": "MuiSelect-select-99",
                            "selectMenu": "MuiSelect-selectMenu-102",
                          },
                          "displayEmpty": false,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      multiline={false}
                      onChange={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Object {},
                            ],
                            Array [
                              Object {
                                "target": Object {
                                  "value": undefined,
                                },
                              },
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      type="text"
                      value="AlignmentsTrack"
                    >
                      <WithFormControlContext(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd-78",
                            "adornedStart": "MuiInputBase-adornedStart-77",
                            "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                            "error": "MuiInputBase-error-79 MuiInput-error-65",
                            "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                            "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                            "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                            "input": "MuiInputBase-input-83 MuiInput-input-68",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                            "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                            "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                            "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                            "marginDense": "MuiInputBase-marginDense-80",
                            "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                            "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                          }
                        }
                        fullWidth={true}
                        inputComponent={[Function]}
                        inputProps={
                          Object {
                            "IconComponent": [Function],
                            "MenuProps": undefined,
                            "SelectDisplayProps": undefined,
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(MenuItem)
                                value="BasicTrack"
                              >
                                BasicTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="DynamicTrack"
                              >
                                DynamicTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="AlignmentsTrack"
                              >
                                AlignmentsTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="SequenceTrack"
                              >
                                SequenceTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="ReferenceSequence"
                              >
                                ReferenceSequence
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="FilteringTrack"
                              >
                                FilteringTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="WiggleTrack"
                              >
                                WiggleTrack
                              </WithStyles(MenuItem)>,
                            ],
                            "classes": Object {
                              "disabled": "MuiSelect-disabled-103",
                              "filled": "MuiSelect-filled-100",
                              "icon": "MuiSelect-icon-104",
                              "outlined": "MuiSelect-outlined-101",
                              "root": "MuiSelect-root-98",
                              "select": "MuiSelect-select-99",
                              "selectMenu": "MuiSelect-selectMenu-102",
                            },
                            "displayEmpty": false,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        multiline={false}
                        onChange={
                          [MockFunction] {
                            "calls": Array [
                              Array [
                                Object {},
                              ],
                              Array [
                                Object {
                                  "target": Object {
                                    "value": undefined,
                                  },
                                },
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        type="text"
                        value="AlignmentsTrack"
                      >
                        <InputBase
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd-78",
                              "adornedStart": "MuiInputBase-adornedStart-77",
                              "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                              "error": "MuiInputBase-error-79 MuiInput-error-65",
                              "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                              "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                              "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                              "input": "MuiInputBase-input-83 MuiInput-input-68",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                              "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                              "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                              "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                              "marginDense": "MuiInputBase-marginDense-80",
                              "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                              "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                            }
                          }
                          fullWidth={true}
                          inputComponent={[Function]}
                          inputProps={
                            Object {
                              "IconComponent": [Function],
                              "MenuProps": undefined,
                              "SelectDisplayProps": undefined,
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(MenuItem)
                                  value="BasicTrack"
                                >
                                  BasicTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="DynamicTrack"
                                >
                                  DynamicTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="AlignmentsTrack"
                                >
                                  AlignmentsTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="SequenceTrack"
                                >
                                  SequenceTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="ReferenceSequence"
                                >
                                  ReferenceSequence
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="FilteringTrack"
                                >
                                  FilteringTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="WiggleTrack"
                                >
                                  WiggleTrack
                                </WithStyles(MenuItem)>,
                              ],
                              "classes": Object {
                                "disabled": "MuiSelect-disabled-103",
                                "filled": "MuiSelect-filled-100",
                                "icon": "MuiSelect-icon-104",
                                "outlined": "MuiSelect-outlined-101",
                                "root": "MuiSelect-root-98",
                                "select": "MuiSelect-select-99",
                                "selectMenu": "MuiSelect-selectMenu-102",
                              },
                              "displayEmpty": false,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          muiFormControl={
                            Object {
                              "adornedStart": false,
                              "disabled": false,
                              "error": false,
                              "filled": true,
                              "focused": false,
                              "margin": "none",
                              "onBlur": [Function],
                              "onEmpty": [Function],
                              "onFilled": [Function],
                              "onFocus": [Function],
                              "required": false,
                              "variant": "standard",
                            }
                          }
                          multiline={false}
                          onChange={
                            [MockFunction] {
                              "calls": Array [
                                Array [
                                  Object {},
                                ],
                                Array [
                                  Object {
                                    "target": Object {
                                      "value": undefined,
                                    },
                                  },
                                ],
                              ],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          type="text"
                          value="AlignmentsTrack"
                        >
                          <div
                            className="MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64 MuiInputBase-fullWidth-82 MuiInput-fullWidth-67 MuiInputBase-formControl-74 MuiInput-formControl-61"
                            onClick={[Function]}
                          >
                            <SelectInput
                              IconComponent={[Function]}
                              aria-invalid={false}
                              autoWidth={false}
                              className="MuiInputBase-input-83 MuiInput-input-68"
                              classes={
                                Object {
                                  "disabled": "MuiSelect-disabled-103",
                                  "filled": "MuiSelect-filled-100",
                                  "icon": "MuiSelect-icon-104",
                                  "outlined": "MuiSelect-outlined-101",
                                  "root": "MuiSelect-root-98",
                                  "select": "MuiSelect-select-99",
                                  "selectMenu": "MuiSelect-selectMenu-102",
                                }
                              }
                              disabled={false}
                              displayEmpty={false}
                              inputRef={[Function]}
                              multiple={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              value="AlignmentsTrack"
                              variant="standard"
                            >
                              <div
                                className="MuiSelect-root-98"
                              >
                                <div
                                  aria-haspopup="true"
                                  aria-pressed="false"
                                  className="MuiSelect-select-99 MuiSelect-selectMenu-102 MuiInputBase-input-83 MuiInput-input-68"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  tabIndex={0}
                                >
                                  AlignmentsTrack
                                </div>
                                <input
                                  type="hidden"
                                  value="AlignmentsTrack"
                                />
                                <pure(ArrowDropDown)
                                  className="MuiSelect-icon-104"
                                >
                                  <ArrowDropDown
                                    className="MuiSelect-icon-104"
                                  >
                                    <WithStyles(SvgIcon)
                                      className="MuiSelect-icon-104"
                                    >
                                      <SvgIcon
                                        className="MuiSelect-icon-104"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction-108",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled-110",
                                            "colorError": "MuiSvgIcon-colorError-109",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary-106",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary-107",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-111",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-113",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-112",
                                            "root": "MuiSvgIcon-root-105",
                                          }
                                        }
                                        color="inherit"
                                        component="svg"
                                        fontSize="default"
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root-105 MuiSelect-icon-104"
                                          focusable="false"
                                          role="presentation"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </SvgIcon>
                                    </WithStyles(SvgIcon)>
                                  </ArrowDropDown>
                                </pure(ArrowDropDown)>
                                <WithStyles(Menu)
                                  MenuListProps={
                                    Object {
                                      "disableListWrap": true,
                                      "role": "listbox",
                                    }
                                  }
                                  PaperProps={
                                    Object {
                                      "style": Object {
                                        "minWidth": null,
                                      },
                                    }
                                  }
                                  id="menu-"
                                  onClose={[Function]}
                                  open={false}
                                >
                                  <Menu
                                    MenuListProps={
                                      Object {
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": null,
                                        },
                                      }
                                    }
                                    classes={
                                      Object {
                                        "paper": "MuiMenu-paper-114",
                                      }
                                    }
                                    disableAutoFocusItem={false}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                    theme={
                                      Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "hover": "rgba(0, 0, 0, 0.08)",
                                            "hoverOpacity": 0.08,
                                            "selected": "rgba(0, 0, 0, 0.14)",
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                          "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                          "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": Object {
                                          "unit": 8,
                                        },
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.46429em",
                                          },
                                          "body1Next": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "lineHeight": "1.71429em",
                                          },
                                          "body2Next": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.5,
                                          },
                                          "button": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "textTransform": "uppercase",
                                          },
                                          "buttonNext": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.375em",
                                          },
                                          "captionNext": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "display1": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.20588em",
                                          },
                                          "display2": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.8125rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.13333em",
                                            "marginLeft": "-.02em",
                                          },
                                          "display3": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "-.02em",
                                            "lineHeight": "1.30357em",
                                            "marginLeft": "-.02em",
                                          },
                                          "display4": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "7rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-.04em",
                                            "lineHeight": "1.14286em",
                                            "marginLeft": "-.04em",
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1,
                                          },
                                          "h2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1,
                                          },
                                          "h3": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.04,
                                          },
                                          "h4": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.17,
                                          },
                                          "h5": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.33,
                                          },
                                          "h6": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "headline": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.35417em",
                                          },
                                          "overline": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subheading": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.5em",
                                          },
                                          "subtitle1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                          "title": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.3125rem",
                                            "fontWeight": 500,
                                            "lineHeight": "1.16667em",
                                          },
                                          "useNextVariants": false,
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "tooltip": 1500,
                                        },
                                      }
                                    }
                                    transitionDuration="auto"
                                  >
                                    <WithStyles(Popover)
                                      PaperProps={
                                        Object {
                                          "classes": Object {
                                            "root": "MuiMenu-paper-114",
                                          },
                                          "style": Object {
                                            "minWidth": null,
                                          },
                                        }
                                      }
                                      anchorOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      getContentAnchorEl={[Function]}
                                      id="menu-"
                                      onClose={[Function]}
                                      onEntering={[Function]}
                                      open={false}
                                      transformOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      transitionDuration="auto"
                                    >
                                      <Popover
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper-114",
                                            },
                                            "style": Object {
                                              "minWidth": null,
                                            },
                                          }
                                        }
                                        TransitionComponent={[Function]}
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        anchorReference="anchorEl"
                                        classes={
                                          Object {
                                            "paper": "MuiPopover-paper-115",
                                          }
                                        }
                                        elevation={8}
                                        getContentAnchorEl={[Function]}
                                        id="menu-"
                                        marginThreshold={16}
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <WithStyles(Modal)
                                          BackdropProps={
                                            Object {
                                              "invisible": true,
                                            }
                                          }
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                        >
                                          <Modal
                                            BackdropComponent={[Function]}
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            classes={
                                              Object {
                                                "hidden": "MuiModal-hidden-117",
                                                "root": "MuiModal-root-116",
                                              }
                                            }
                                            closeAfterTransition={false}
                                            disableAutoFocus={false}
                                            disableBackdropClick={false}
                                            disableEnforceFocus={false}
                                            disableEscapeKeyDown={false}
                                            disablePortal={false}
                                            disableRestoreFocus={false}
                                            hideBackdrop={false}
                                            id="menu-"
                                            keepMounted={false}
                                            manager={
                                              ModalManager {
                                                "data": Array [],
                                                "handleContainerOverflow": true,
                                                "hideSiblingNodes": true,
                                                "modals": Array [],
                                              }
                                            }
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </WithStyles(Modal)>
                                      </Popover>
                                    </WithStyles(Popover)>
                                  </Menu>
                                </WithStyles(Menu)>
                              </div>
                            </SelectInput>
                          </div>
                        </InputBase>
                      </WithFormControlContext(InputBase)>
                    </WithStyles(WithFormControlContext(InputBase))>
                  </Input>
                </WithStyles(Input)>
              </Select>
            </WithFormControlContext(Select)>
          </WithStyles(WithFormControlContext(Select))>
          <WithStyles(WithFormControlContext(FormHelperText))>
            <WithFormControlContext(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained-94",
                  "disabled": "MuiFormHelperText-disabled-92",
                  "error": "MuiFormHelperText-error-91",
                  "filled": "MuiFormHelperText-filled-96",
                  "focused": "MuiFormHelperText-focused-95",
                  "marginDense": "MuiFormHelperText-marginDense-93",
                  "required": "MuiFormHelperText-required-97",
                  "root": "MuiFormHelperText-root-90",
                }
              }
            >
              <FormHelperText
                classes={
                  Object {
                    "contained": "MuiFormHelperText-contained-94",
                    "disabled": "MuiFormHelperText-disabled-92",
                    "error": "MuiFormHelperText-error-91",
                    "filled": "MuiFormHelperText-filled-96",
                    "focused": "MuiFormHelperText-focused-95",
                    "marginDense": "MuiFormHelperText-marginDense-93",
                    "required": "MuiFormHelperText-required-97",
                    "root": "MuiFormHelperText-root-90",
                  }
                }
                component="p"
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <p
                  className="MuiFormHelperText-root-90 MuiFormHelperText-filled-96"
                >
                  A track type
                </p>
              </FormHelperText>
            </WithFormControlContext(FormHelperText)>
          </WithStyles(WithFormControlContext(FormHelperText))>
        </div>
      </FormControl>
    </WithStyles(FormControl)>
  </TextField>,
]
`;

exports[`<ConfirmTrack /> mounts with uri 1`] = `
Array [
  <WithStyles(Typography)
    className="ConfirmTrack-spacing-1"
  >
    <Typography
      align="inherit"
      className="ConfirmTrack-spacing-1"
      classes={
        Object {
          "alignCenter": "MuiTypography-alignCenter-25",
          "alignJustify": "MuiTypography-alignJustify-27",
          "alignLeft": "MuiTypography-alignLeft-24",
          "alignRight": "MuiTypography-alignRight-26",
          "body1": "MuiTypography-body1-11",
          "body2": "MuiTypography-body2-10",
          "button": "MuiTypography-button-13",
          "caption": "MuiTypography-caption-12",
          "colorError": "MuiTypography-colorError-36",
          "colorInherit": "MuiTypography-colorInherit-31",
          "colorPrimary": "MuiTypography-colorPrimary-32",
          "colorSecondary": "MuiTypography-colorSecondary-33",
          "colorTextPrimary": "MuiTypography-colorTextPrimary-34",
          "colorTextSecondary": "MuiTypography-colorTextSecondary-35",
          "display1": "MuiTypography-display1-6",
          "display2": "MuiTypography-display2-5",
          "display3": "MuiTypography-display3-4",
          "display4": "MuiTypography-display4-3",
          "gutterBottom": "MuiTypography-gutterBottom-29",
          "h1": "MuiTypography-h1-14",
          "h2": "MuiTypography-h2-15",
          "h3": "MuiTypography-h3-16",
          "h4": "MuiTypography-h4-17",
          "h5": "MuiTypography-h5-18",
          "h6": "MuiTypography-h6-19",
          "headline": "MuiTypography-headline-7",
          "inline": "MuiTypography-inline-37",
          "noWrap": "MuiTypography-noWrap-28",
          "overline": "MuiTypography-overline-22",
          "paragraph": "MuiTypography-paragraph-30",
          "root": "MuiTypography-root-2",
          "srOnly": "MuiTypography-srOnly-23",
          "subheading": "MuiTypography-subheading-9",
          "subtitle1": "MuiTypography-subtitle1-20",
          "subtitle2": "MuiTypography-subtitle2-21",
          "title": "MuiTypography-title-8",
        }
      }
      color="default"
      gutterBottom={false}
      headlineMapping={
        Object {
          "body1": "p",
          "body2": "p",
          "display1": "h1",
          "display2": "h1",
          "display3": "h1",
          "display4": "h1",
          "h1": "h1",
          "h2": "h2",
          "h3": "h3",
          "h4": "h4",
          "h5": "h5",
          "h6": "h6",
          "headline": "h1",
          "subheading": "h3",
          "subtitle1": "h6",
          "subtitle2": "h6",
          "title": "h2",
        }
      }
      inline={false}
      noWrap={false}
      paragraph={false}
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "hover": "rgba(0, 0, 0, 0.08)",
              "hoverOpacity": 0.08,
              "selected": "rgba(0, 0, 0, 0.14)",
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "#303f9f",
              "light": "#7986cb",
              "main": "#3f51b5",
            },
            "secondary": Object {
              "contrastText": "#fff",
              "dark": "#c51162",
              "light": "#ff4081",
              "main": "#f50057",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
            "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
            "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": Object {
            "unit": 8,
          },
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": "1.46429em",
            },
            "body1Next": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": "1.71429em",
            },
            "body2Next": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.5,
            },
            "button": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "textTransform": "uppercase",
            },
            "buttonNext": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": "1.375em",
            },
            "captionNext": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "display1": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": "1.20588em",
            },
            "display2": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.8125rem",
              "fontWeight": 400,
              "lineHeight": "1.13333em",
              "marginLeft": "-.02em",
            },
            "display3": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.5rem",
              "fontWeight": 400,
              "letterSpacing": "-.02em",
              "lineHeight": "1.30357em",
              "marginLeft": "-.02em",
            },
            "display4": Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "7rem",
              "fontWeight": 300,
              "letterSpacing": "-.04em",
              "lineHeight": "1.14286em",
              "marginLeft": "-.04em",
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1,
            },
            "h2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1,
            },
            "h3": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.04,
            },
            "h4": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.17,
            },
            "h5": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.33,
            },
            "h6": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.25rem",
              "fontWeight": 500,
              "letterSpacing": "0.0075em",
              "lineHeight": 1.6,
            },
            "headline": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": "1.35417em",
            },
            "overline": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subheading": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": "1.5em",
            },
            "subtitle1": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
            "title": Object {
              "color": "rgba(0, 0, 0, 0.87)",
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.3125rem",
              "fontWeight": 500,
              "lineHeight": "1.16667em",
            },
            "useNextVariants": false,
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "tooltip": 1500,
          },
        }
      }
    >
      <p
        className="MuiTypography-root-2 MuiTypography-body1-11 ConfirmTrack-spacing-1"
      >
        Using adapter 
        <code>
          BamAdapter
        </code>
         and guessing track type 
        <code>
          AlignmentsTrack
        </code>
        . Please enter a track name and, if necessary, update the track type.
      </p>
    </Typography>
  </WithStyles(Typography)>,
  <TextField
    className="ConfirmTrack-spacing-1"
    fullWidth={true}
    helperText="A name for this track"
    label="trackName"
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "bamLocation": Object {
                "uri": "test.bam",
              },
              "index": Object {
                "location": Object {
                  "uri": "test.bam.bai",
                },
              },
              "type": "BamAdapter",
            },
          ],
          Array [
            Object {
              "target": Object {
                "value": "AlignmentsTrack",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    required={false}
    select={false}
    value=""
    variant="standard"
  >
    <WithStyles(FormControl)
      className="ConfirmTrack-spacing-1"
      fullWidth={true}
      required={false}
      variant="standard"
    >
      <FormControl
        className="ConfirmTrack-spacing-1"
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth-41",
            "marginDense": "MuiFormControl-marginDense-40",
            "marginNormal": "MuiFormControl-marginNormal-39",
            "root": "MuiFormControl-root-38",
          }
        }
        component="div"
        disabled={false}
        error={false}
        fullWidth={true}
        margin="none"
        required={false}
        variant="standard"
      >
        <div
          className="MuiFormControl-root-38 MuiFormControl-fullWidth-41 ConfirmTrack-spacing-1"
        >
          <WithStyles(WithFormControlContext(InputLabel))>
            <WithFormControlContext(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated-50",
                  "disabled": "MuiInputLabel-disabled-44",
                  "error": "MuiInputLabel-error-45",
                  "filled": "MuiInputLabel-filled-51",
                  "focused": "MuiInputLabel-focused-43",
                  "formControl": "MuiInputLabel-formControl-47",
                  "marginDense": "MuiInputLabel-marginDense-48",
                  "outlined": "MuiInputLabel-outlined-52",
                  "required": "MuiInputLabel-required-46",
                  "root": "MuiInputLabel-root-42",
                  "shrink": "MuiInputLabel-shrink-49",
                }
              }
            >
              <InputLabel
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-50",
                    "disabled": "MuiInputLabel-disabled-44",
                    "error": "MuiInputLabel-error-45",
                    "filled": "MuiInputLabel-filled-51",
                    "focused": "MuiInputLabel-focused-43",
                    "formControl": "MuiInputLabel-formControl-47",
                    "marginDense": "MuiInputLabel-marginDense-48",
                    "outlined": "MuiInputLabel-outlined-52",
                    "required": "MuiInputLabel-required-46",
                    "root": "MuiInputLabel-root-42",
                    "shrink": "MuiInputLabel-shrink-49",
                  }
                }
                disableAnimation={false}
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": false,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <WithStyles(WithFormControlContext(FormLabel))
                  className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                  classes={
                    Object {
                      "disabled": "MuiInputLabel-disabled-44",
                      "error": "MuiInputLabel-error-45",
                      "focused": "MuiInputLabel-focused-43",
                      "required": "MuiInputLabel-required-46",
                    }
                  }
                  data-shrink={false}
                >
                  <WithFormControlContext(FormLabel)
                    className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk-59",
                        "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                        "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                        "filled": "MuiFormLabel-filled-57",
                        "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                        "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                        "root": "MuiFormLabel-root-53",
                      }
                    }
                    data-shrink={false}
                  >
                    <FormLabel
                      className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-59",
                          "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                          "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                          "filled": "MuiFormLabel-filled-57",
                          "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                          "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                          "root": "MuiFormLabel-root-53",
                        }
                      }
                      component="label"
                      data-shrink={false}
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": false,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "standard",
                        }
                      }
                    >
                      <label
                        className="MuiFormLabel-root-53 MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50"
                        data-shrink={false}
                      >
                        trackName
                      </label>
                    </FormLabel>
                  </WithFormControlContext(FormLabel)>
                </WithStyles(WithFormControlContext(FormLabel))>
              </InputLabel>
            </WithFormControlContext(InputLabel)>
          </WithStyles(WithFormControlContext(InputLabel))>
          <WithStyles(Input)
            fullWidth={true}
            onChange={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "bamLocation": Object {
                        "uri": "test.bam",
                      },
                      "index": Object {
                        "location": Object {
                          "uri": "test.bam.bai",
                        },
                      },
                      "type": "BamAdapter",
                    },
                  ],
                  Array [
                    Object {
                      "target": Object {
                        "value": "AlignmentsTrack",
                      },
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            value=""
          >
            <Input
              classes={
                Object {
                  "disabled": "MuiInput-disabled-63",
                  "error": "MuiInput-error-65",
                  "focused": "MuiInput-focused-62",
                  "formControl": "MuiInput-formControl-61",
                  "fullWidth": "MuiInput-fullWidth-67",
                  "input": "MuiInput-input-68",
                  "inputMarginDense": "MuiInput-inputMarginDense-69",
                  "inputMultiline": "MuiInput-inputMultiline-70",
                  "inputType": "MuiInput-inputType-71",
                  "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                  "multiline": "MuiInput-multiline-66",
                  "root": "MuiInput-root-60",
                  "underline": "MuiInput-underline-64",
                }
              }
              fullWidth={true}
              onChange={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "bamLocation": Object {
                          "uri": "test.bam",
                        },
                        "index": Object {
                          "location": Object {
                            "uri": "test.bam.bai",
                          },
                        },
                        "type": "BamAdapter",
                      },
                    ],
                    Array [
                      Object {
                        "target": Object {
                          "value": "AlignmentsTrack",
                        },
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
              value=""
            >
              <WithStyles(WithFormControlContext(InputBase))
                classes={
                  Object {
                    "disabled": "MuiInput-disabled-63",
                    "error": "MuiInput-error-65",
                    "focused": "MuiInput-focused-62",
                    "formControl": "MuiInput-formControl-61",
                    "fullWidth": "MuiInput-fullWidth-67",
                    "input": "MuiInput-input-68",
                    "inputMarginDense": "MuiInput-inputMarginDense-69",
                    "inputMultiline": "MuiInput-inputMultiline-70",
                    "inputType": "MuiInput-inputType-71",
                    "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                    "multiline": "MuiInput-multiline-66",
                    "root": "MuiInput-root-60 MuiInput-underline-64",
                    "underline": null,
                  }
                }
                fullWidth={true}
                inputComponent="input"
                multiline={false}
                onChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "bamLocation": Object {
                            "uri": "test.bam",
                          },
                          "index": Object {
                            "location": Object {
                              "uri": "test.bam.bai",
                            },
                          },
                          "type": "BamAdapter",
                        },
                      ],
                      Array [
                        Object {
                          "target": Object {
                            "value": "AlignmentsTrack",
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                type="text"
                value=""
              >
                <WithFormControlContext(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd-78",
                      "adornedStart": "MuiInputBase-adornedStart-77",
                      "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                      "error": "MuiInputBase-error-79 MuiInput-error-65",
                      "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                      "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                      "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                      "input": "MuiInputBase-input-83 MuiInput-input-68",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                      "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                      "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                      "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                      "marginDense": "MuiInputBase-marginDense-80",
                      "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                      "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                    }
                  }
                  fullWidth={true}
                  inputComponent="input"
                  multiline={false}
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "bamLocation": Object {
                              "uri": "test.bam",
                            },
                            "index": Object {
                              "location": Object {
                                "uri": "test.bam.bai",
                              },
                            },
                            "type": "BamAdapter",
                          },
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": "AlignmentsTrack",
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  type="text"
                  value=""
                >
                  <InputBase
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd-78",
                        "adornedStart": "MuiInputBase-adornedStart-77",
                        "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                        "error": "MuiInputBase-error-79 MuiInput-error-65",
                        "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                        "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                        "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                        "input": "MuiInputBase-input-83 MuiInput-input-68",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                        "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                        "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                        "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                        "marginDense": "MuiInputBase-marginDense-80",
                        "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                        "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                      }
                    }
                    fullWidth={true}
                    inputComponent="input"
                    muiFormControl={
                      Object {
                        "adornedStart": false,
                        "disabled": false,
                        "error": false,
                        "filled": false,
                        "focused": false,
                        "margin": "none",
                        "onBlur": [Function],
                        "onEmpty": [Function],
                        "onFilled": [Function],
                        "onFocus": [Function],
                        "required": false,
                        "variant": "standard",
                      }
                    }
                    multiline={false}
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {
                              "bamLocation": Object {
                                "uri": "test.bam",
                              },
                              "index": Object {
                                "location": Object {
                                  "uri": "test.bam.bai",
                                },
                              },
                              "type": "BamAdapter",
                            },
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": "AlignmentsTrack",
                              },
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    type="text"
                    value=""
                  >
                    <div
                      className="MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64 MuiInputBase-fullWidth-82 MuiInput-fullWidth-67 MuiInputBase-formControl-74 MuiInput-formControl-61"
                      onClick={[Function]}
                    >
                      <input
                        aria-invalid={false}
                        className="MuiInputBase-input-83 MuiInput-input-68"
                        disabled={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        type="text"
                        value=""
                      />
                    </div>
                  </InputBase>
                </WithFormControlContext(InputBase)>
              </WithStyles(WithFormControlContext(InputBase))>
            </Input>
          </WithStyles(Input)>
          <WithStyles(WithFormControlContext(FormHelperText))>
            <WithFormControlContext(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained-94",
                  "disabled": "MuiFormHelperText-disabled-92",
                  "error": "MuiFormHelperText-error-91",
                  "filled": "MuiFormHelperText-filled-96",
                  "focused": "MuiFormHelperText-focused-95",
                  "marginDense": "MuiFormHelperText-marginDense-93",
                  "required": "MuiFormHelperText-required-97",
                  "root": "MuiFormHelperText-root-90",
                }
              }
            >
              <FormHelperText
                classes={
                  Object {
                    "contained": "MuiFormHelperText-contained-94",
                    "disabled": "MuiFormHelperText-disabled-92",
                    "error": "MuiFormHelperText-error-91",
                    "filled": "MuiFormHelperText-filled-96",
                    "focused": "MuiFormHelperText-focused-95",
                    "marginDense": "MuiFormHelperText-marginDense-93",
                    "required": "MuiFormHelperText-required-97",
                    "root": "MuiFormHelperText-root-90",
                  }
                }
                component="p"
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": false,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <p
                  className="MuiFormHelperText-root-90"
                >
                  A name for this track
                </p>
              </FormHelperText>
            </WithFormControlContext(FormHelperText)>
          </WithStyles(WithFormControlContext(FormHelperText))>
        </div>
      </FormControl>
    </WithStyles(FormControl)>
  </TextField>,
  <TextField
    fullWidth={true}
    helperText="A track type"
    label="trackType"
    onChange={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "bamLocation": Object {
                "uri": "test.bam",
              },
              "index": Object {
                "location": Object {
                  "uri": "test.bam.bai",
                },
              },
              "type": "BamAdapter",
            },
          ],
          Array [
            Object {
              "target": Object {
                "value": "AlignmentsTrack",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    required={false}
    select={true}
    value="AlignmentsTrack"
    variant="standard"
  >
    <WithStyles(FormControl)
      fullWidth={true}
      required={false}
      variant="standard"
    >
      <FormControl
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth-41",
            "marginDense": "MuiFormControl-marginDense-40",
            "marginNormal": "MuiFormControl-marginNormal-39",
            "root": "MuiFormControl-root-38",
          }
        }
        component="div"
        disabled={false}
        error={false}
        fullWidth={true}
        margin="none"
        required={false}
        variant="standard"
      >
        <div
          className="MuiFormControl-root-38 MuiFormControl-fullWidth-41"
        >
          <WithStyles(WithFormControlContext(InputLabel))>
            <WithFormControlContext(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated-50",
                  "disabled": "MuiInputLabel-disabled-44",
                  "error": "MuiInputLabel-error-45",
                  "filled": "MuiInputLabel-filled-51",
                  "focused": "MuiInputLabel-focused-43",
                  "formControl": "MuiInputLabel-formControl-47",
                  "marginDense": "MuiInputLabel-marginDense-48",
                  "outlined": "MuiInputLabel-outlined-52",
                  "required": "MuiInputLabel-required-46",
                  "root": "MuiInputLabel-root-42",
                  "shrink": "MuiInputLabel-shrink-49",
                }
              }
            >
              <InputLabel
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-50",
                    "disabled": "MuiInputLabel-disabled-44",
                    "error": "MuiInputLabel-error-45",
                    "filled": "MuiInputLabel-filled-51",
                    "focused": "MuiInputLabel-focused-43",
                    "formControl": "MuiInputLabel-formControl-47",
                    "marginDense": "MuiInputLabel-marginDense-48",
                    "outlined": "MuiInputLabel-outlined-52",
                    "required": "MuiInputLabel-required-46",
                    "root": "MuiInputLabel-root-42",
                    "shrink": "MuiInputLabel-shrink-49",
                  }
                }
                disableAnimation={false}
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <WithStyles(WithFormControlContext(FormLabel))
                  className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                  classes={
                    Object {
                      "disabled": "MuiInputLabel-disabled-44",
                      "error": "MuiInputLabel-error-45",
                      "focused": "MuiInputLabel-focused-43",
                      "required": "MuiInputLabel-required-46",
                    }
                  }
                  data-shrink={true}
                >
                  <WithFormControlContext(FormLabel)
                    className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk-59",
                        "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                        "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                        "filled": "MuiFormLabel-filled-57",
                        "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                        "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                        "root": "MuiFormLabel-root-53",
                      }
                    }
                    data-shrink={true}
                  >
                    <FormLabel
                      className="MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-59",
                          "disabled": "MuiFormLabel-disabled-55 MuiInputLabel-disabled-44",
                          "error": "MuiFormLabel-error-56 MuiInputLabel-error-45",
                          "filled": "MuiFormLabel-filled-57",
                          "focused": "MuiFormLabel-focused-54 MuiInputLabel-focused-43",
                          "required": "MuiFormLabel-required-58 MuiInputLabel-required-46",
                          "root": "MuiFormLabel-root-53",
                        }
                      }
                      component="label"
                      data-shrink={true}
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": true,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "standard",
                        }
                      }
                    >
                      <label
                        className="MuiFormLabel-root-53 MuiFormLabel-filled-57 MuiInputLabel-root-42 MuiInputLabel-formControl-47 MuiInputLabel-animated-50 MuiInputLabel-shrink-49"
                        data-shrink={true}
                      >
                        trackType
                      </label>
                    </FormLabel>
                  </WithFormControlContext(FormLabel)>
                </WithStyles(WithFormControlContext(FormLabel))>
              </InputLabel>
            </WithFormControlContext(InputLabel)>
          </WithStyles(WithFormControlContext(InputLabel))>
          <WithStyles(WithFormControlContext(Select))
            input={
              <WithStyles(Input)
                fullWidth={true}
                onChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "bamLocation": Object {
                            "uri": "test.bam",
                          },
                          "index": Object {
                            "location": Object {
                              "uri": "test.bam.bai",
                            },
                          },
                          "type": "BamAdapter",
                        },
                      ],
                      Array [
                        Object {
                          "target": Object {
                            "value": "AlignmentsTrack",
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                value="AlignmentsTrack"
              />
            }
            value="AlignmentsTrack"
          >
            <WithFormControlContext(Select)
              classes={
                Object {
                  "disabled": "MuiSelect-disabled-103",
                  "filled": "MuiSelect-filled-100",
                  "icon": "MuiSelect-icon-104",
                  "outlined": "MuiSelect-outlined-101",
                  "root": "MuiSelect-root-98",
                  "select": "MuiSelect-select-99",
                  "selectMenu": "MuiSelect-selectMenu-102",
                }
              }
              input={
                <WithStyles(Input)
                  fullWidth={true}
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "bamLocation": Object {
                              "uri": "test.bam",
                            },
                            "index": Object {
                              "location": Object {
                                "uri": "test.bam.bai",
                              },
                            },
                            "type": "BamAdapter",
                          },
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": "AlignmentsTrack",
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  value="AlignmentsTrack"
                />
              }
              value="AlignmentsTrack"
            >
              <Select
                IconComponent={[Function]}
                autoWidth={false}
                classes={
                  Object {
                    "disabled": "MuiSelect-disabled-103",
                    "filled": "MuiSelect-filled-100",
                    "icon": "MuiSelect-icon-104",
                    "outlined": "MuiSelect-outlined-101",
                    "root": "MuiSelect-root-98",
                    "select": "MuiSelect-select-99",
                    "selectMenu": "MuiSelect-selectMenu-102",
                  }
                }
                displayEmpty={false}
                input={
                  <WithStyles(Input)
                    fullWidth={true}
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {
                              "bamLocation": Object {
                                "uri": "test.bam",
                              },
                              "index": Object {
                                "location": Object {
                                  "uri": "test.bam.bai",
                                },
                              },
                              "type": "BamAdapter",
                            },
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": "AlignmentsTrack",
                              },
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    value="AlignmentsTrack"
                  />
                }
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
                multiple={false}
                native={false}
                value="AlignmentsTrack"
              >
                <WithStyles(Input)
                  fullWidth={true}
                  inputComponent={[Function]}
                  inputProps={
                    Object {
                      "IconComponent": [Function],
                      "MenuProps": undefined,
                      "SelectDisplayProps": undefined,
                      "autoWidth": false,
                      "children": Array [
                        <WithStyles(MenuItem)
                          value="BasicTrack"
                        >
                          BasicTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="DynamicTrack"
                        >
                          DynamicTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="AlignmentsTrack"
                        >
                          AlignmentsTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="SequenceTrack"
                        >
                          SequenceTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="ReferenceSequence"
                        >
                          ReferenceSequence
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="FilteringTrack"
                        >
                          FilteringTrack
                        </WithStyles(MenuItem)>,
                        <WithStyles(MenuItem)
                          value="WiggleTrack"
                        >
                          WiggleTrack
                        </WithStyles(MenuItem)>,
                      ],
                      "classes": Object {
                        "disabled": "MuiSelect-disabled-103",
                        "filled": "MuiSelect-filled-100",
                        "icon": "MuiSelect-icon-104",
                        "outlined": "MuiSelect-outlined-101",
                        "root": "MuiSelect-root-98",
                        "select": "MuiSelect-select-99",
                        "selectMenu": "MuiSelect-selectMenu-102",
                      },
                      "displayEmpty": false,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "bamLocation": Object {
                              "uri": "test.bam",
                            },
                            "index": Object {
                              "location": Object {
                                "uri": "test.bam.bai",
                              },
                            },
                            "type": "BamAdapter",
                          },
                        ],
                        Array [
                          Object {
                            "target": Object {
                              "value": "AlignmentsTrack",
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  value="AlignmentsTrack"
                >
                  <Input
                    classes={
                      Object {
                        "disabled": "MuiInput-disabled-63",
                        "error": "MuiInput-error-65",
                        "focused": "MuiInput-focused-62",
                        "formControl": "MuiInput-formControl-61",
                        "fullWidth": "MuiInput-fullWidth-67",
                        "input": "MuiInput-input-68",
                        "inputMarginDense": "MuiInput-inputMarginDense-69",
                        "inputMultiline": "MuiInput-inputMultiline-70",
                        "inputType": "MuiInput-inputType-71",
                        "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                        "multiline": "MuiInput-multiline-66",
                        "root": "MuiInput-root-60",
                        "underline": "MuiInput-underline-64",
                      }
                    }
                    fullWidth={true}
                    inputComponent={[Function]}
                    inputProps={
                      Object {
                        "IconComponent": [Function],
                        "MenuProps": undefined,
                        "SelectDisplayProps": undefined,
                        "autoWidth": false,
                        "children": Array [
                          <WithStyles(MenuItem)
                            value="BasicTrack"
                          >
                            BasicTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="DynamicTrack"
                          >
                            DynamicTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="AlignmentsTrack"
                          >
                            AlignmentsTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="SequenceTrack"
                          >
                            SequenceTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="ReferenceSequence"
                          >
                            ReferenceSequence
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="FilteringTrack"
                          >
                            FilteringTrack
                          </WithStyles(MenuItem)>,
                          <WithStyles(MenuItem)
                            value="WiggleTrack"
                          >
                            WiggleTrack
                          </WithStyles(MenuItem)>,
                        ],
                        "classes": Object {
                          "disabled": "MuiSelect-disabled-103",
                          "filled": "MuiSelect-filled-100",
                          "icon": "MuiSelect-icon-104",
                          "outlined": "MuiSelect-outlined-101",
                          "root": "MuiSelect-root-98",
                          "select": "MuiSelect-select-99",
                          "selectMenu": "MuiSelect-selectMenu-102",
                        },
                        "displayEmpty": false,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    onChange={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            Object {
                              "bamLocation": Object {
                                "uri": "test.bam",
                              },
                              "index": Object {
                                "location": Object {
                                  "uri": "test.bam.bai",
                                },
                              },
                              "type": "BamAdapter",
                            },
                          ],
                          Array [
                            Object {
                              "target": Object {
                                "value": "AlignmentsTrack",
                              },
                            },
                          ],
                        ],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    value="AlignmentsTrack"
                  >
                    <WithStyles(WithFormControlContext(InputBase))
                      classes={
                        Object {
                          "disabled": "MuiInput-disabled-63",
                          "error": "MuiInput-error-65",
                          "focused": "MuiInput-focused-62",
                          "formControl": "MuiInput-formControl-61",
                          "fullWidth": "MuiInput-fullWidth-67",
                          "input": "MuiInput-input-68",
                          "inputMarginDense": "MuiInput-inputMarginDense-69",
                          "inputMultiline": "MuiInput-inputMultiline-70",
                          "inputType": "MuiInput-inputType-71",
                          "inputTypeSearch": "MuiInput-inputTypeSearch-72",
                          "multiline": "MuiInput-multiline-66",
                          "root": "MuiInput-root-60 MuiInput-underline-64",
                          "underline": null,
                        }
                      }
                      fullWidth={true}
                      inputComponent={[Function]}
                      inputProps={
                        Object {
                          "IconComponent": [Function],
                          "MenuProps": undefined,
                          "SelectDisplayProps": undefined,
                          "autoWidth": false,
                          "children": Array [
                            <WithStyles(MenuItem)
                              value="BasicTrack"
                            >
                              BasicTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="DynamicTrack"
                            >
                              DynamicTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="AlignmentsTrack"
                            >
                              AlignmentsTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="SequenceTrack"
                            >
                              SequenceTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="ReferenceSequence"
                            >
                              ReferenceSequence
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="FilteringTrack"
                            >
                              FilteringTrack
                            </WithStyles(MenuItem)>,
                            <WithStyles(MenuItem)
                              value="WiggleTrack"
                            >
                              WiggleTrack
                            </WithStyles(MenuItem)>,
                          ],
                          "classes": Object {
                            "disabled": "MuiSelect-disabled-103",
                            "filled": "MuiSelect-filled-100",
                            "icon": "MuiSelect-icon-104",
                            "outlined": "MuiSelect-outlined-101",
                            "root": "MuiSelect-root-98",
                            "select": "MuiSelect-select-99",
                            "selectMenu": "MuiSelect-selectMenu-102",
                          },
                          "displayEmpty": false,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      multiline={false}
                      onChange={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Object {
                                "bamLocation": Object {
                                  "uri": "test.bam",
                                },
                                "index": Object {
                                  "location": Object {
                                    "uri": "test.bam.bai",
                                  },
                                },
                                "type": "BamAdapter",
                              },
                            ],
                            Array [
                              Object {
                                "target": Object {
                                  "value": "AlignmentsTrack",
                                },
                              },
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      type="text"
                      value="AlignmentsTrack"
                    >
                      <WithFormControlContext(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd-78",
                            "adornedStart": "MuiInputBase-adornedStart-77",
                            "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                            "error": "MuiInputBase-error-79 MuiInput-error-65",
                            "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                            "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                            "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                            "input": "MuiInputBase-input-83 MuiInput-input-68",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                            "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                            "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                            "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                            "marginDense": "MuiInputBase-marginDense-80",
                            "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                            "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                          }
                        }
                        fullWidth={true}
                        inputComponent={[Function]}
                        inputProps={
                          Object {
                            "IconComponent": [Function],
                            "MenuProps": undefined,
                            "SelectDisplayProps": undefined,
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(MenuItem)
                                value="BasicTrack"
                              >
                                BasicTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="DynamicTrack"
                              >
                                DynamicTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="AlignmentsTrack"
                              >
                                AlignmentsTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="SequenceTrack"
                              >
                                SequenceTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="ReferenceSequence"
                              >
                                ReferenceSequence
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="FilteringTrack"
                              >
                                FilteringTrack
                              </WithStyles(MenuItem)>,
                              <WithStyles(MenuItem)
                                value="WiggleTrack"
                              >
                                WiggleTrack
                              </WithStyles(MenuItem)>,
                            ],
                            "classes": Object {
                              "disabled": "MuiSelect-disabled-103",
                              "filled": "MuiSelect-filled-100",
                              "icon": "MuiSelect-icon-104",
                              "outlined": "MuiSelect-outlined-101",
                              "root": "MuiSelect-root-98",
                              "select": "MuiSelect-select-99",
                              "selectMenu": "MuiSelect-selectMenu-102",
                            },
                            "displayEmpty": false,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        multiline={false}
                        onChange={
                          [MockFunction] {
                            "calls": Array [
                              Array [
                                Object {
                                  "bamLocation": Object {
                                    "uri": "test.bam",
                                  },
                                  "index": Object {
                                    "location": Object {
                                      "uri": "test.bam.bai",
                                    },
                                  },
                                  "type": "BamAdapter",
                                },
                              ],
                              Array [
                                Object {
                                  "target": Object {
                                    "value": "AlignmentsTrack",
                                  },
                                },
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        type="text"
                        value="AlignmentsTrack"
                      >
                        <InputBase
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd-78",
                              "adornedStart": "MuiInputBase-adornedStart-77",
                              "disabled": "MuiInputBase-disabled-76 MuiInput-disabled-63",
                              "error": "MuiInputBase-error-79 MuiInput-error-65",
                              "focused": "MuiInputBase-focused-75 MuiInput-focused-62",
                              "formControl": "MuiInputBase-formControl-74 MuiInput-formControl-61",
                              "fullWidth": "MuiInputBase-fullWidth-82 MuiInput-fullWidth-67",
                              "input": "MuiInputBase-input-83 MuiInput-input-68",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-89",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart-88",
                              "inputMarginDense": "MuiInputBase-inputMarginDense-84 MuiInput-inputMarginDense-69",
                              "inputMultiline": "MuiInputBase-inputMultiline-85 MuiInput-inputMultiline-70",
                              "inputType": "MuiInputBase-inputType-86 MuiInput-inputType-71",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch-87 MuiInput-inputTypeSearch-72",
                              "marginDense": "MuiInputBase-marginDense-80",
                              "multiline": "MuiInputBase-multiline-81 MuiInput-multiline-66",
                              "root": "MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64",
                            }
                          }
                          fullWidth={true}
                          inputComponent={[Function]}
                          inputProps={
                            Object {
                              "IconComponent": [Function],
                              "MenuProps": undefined,
                              "SelectDisplayProps": undefined,
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(MenuItem)
                                  value="BasicTrack"
                                >
                                  BasicTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="DynamicTrack"
                                >
                                  DynamicTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="AlignmentsTrack"
                                >
                                  AlignmentsTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="SequenceTrack"
                                >
                                  SequenceTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="ReferenceSequence"
                                >
                                  ReferenceSequence
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="FilteringTrack"
                                >
                                  FilteringTrack
                                </WithStyles(MenuItem)>,
                                <WithStyles(MenuItem)
                                  value="WiggleTrack"
                                >
                                  WiggleTrack
                                </WithStyles(MenuItem)>,
                              ],
                              "classes": Object {
                                "disabled": "MuiSelect-disabled-103",
                                "filled": "MuiSelect-filled-100",
                                "icon": "MuiSelect-icon-104",
                                "outlined": "MuiSelect-outlined-101",
                                "root": "MuiSelect-root-98",
                                "select": "MuiSelect-select-99",
                                "selectMenu": "MuiSelect-selectMenu-102",
                              },
                              "displayEmpty": false,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          muiFormControl={
                            Object {
                              "adornedStart": false,
                              "disabled": false,
                              "error": false,
                              "filled": true,
                              "focused": false,
                              "margin": "none",
                              "onBlur": [Function],
                              "onEmpty": [Function],
                              "onFilled": [Function],
                              "onFocus": [Function],
                              "required": false,
                              "variant": "standard",
                            }
                          }
                          multiline={false}
                          onChange={
                            [MockFunction] {
                              "calls": Array [
                                Array [
                                  Object {
                                    "bamLocation": Object {
                                      "uri": "test.bam",
                                    },
                                    "index": Object {
                                      "location": Object {
                                        "uri": "test.bam.bai",
                                      },
                                    },
                                    "type": "BamAdapter",
                                  },
                                ],
                                Array [
                                  Object {
                                    "target": Object {
                                      "value": "AlignmentsTrack",
                                    },
                                  },
                                ],
                              ],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          type="text"
                          value="AlignmentsTrack"
                        >
                          <div
                            className="MuiInputBase-root-73 MuiInput-root-60 MuiInput-underline-64 MuiInputBase-fullWidth-82 MuiInput-fullWidth-67 MuiInputBase-formControl-74 MuiInput-formControl-61"
                            onClick={[Function]}
                          >
                            <SelectInput
                              IconComponent={[Function]}
                              aria-invalid={false}
                              autoWidth={false}
                              className="MuiInputBase-input-83 MuiInput-input-68"
                              classes={
                                Object {
                                  "disabled": "MuiSelect-disabled-103",
                                  "filled": "MuiSelect-filled-100",
                                  "icon": "MuiSelect-icon-104",
                                  "outlined": "MuiSelect-outlined-101",
                                  "root": "MuiSelect-root-98",
                                  "select": "MuiSelect-select-99",
                                  "selectMenu": "MuiSelect-selectMenu-102",
                                }
                              }
                              disabled={false}
                              displayEmpty={false}
                              inputRef={[Function]}
                              multiple={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              value="AlignmentsTrack"
                              variant="standard"
                            >
                              <div
                                className="MuiSelect-root-98"
                              >
                                <div
                                  aria-haspopup="true"
                                  aria-pressed="false"
                                  className="MuiSelect-select-99 MuiSelect-selectMenu-102 MuiInputBase-input-83 MuiInput-input-68"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  tabIndex={0}
                                >
                                  AlignmentsTrack
                                </div>
                                <input
                                  type="hidden"
                                  value="AlignmentsTrack"
                                />
                                <pure(ArrowDropDown)
                                  className="MuiSelect-icon-104"
                                >
                                  <ArrowDropDown
                                    className="MuiSelect-icon-104"
                                  >
                                    <WithStyles(SvgIcon)
                                      className="MuiSelect-icon-104"
                                    >
                                      <SvgIcon
                                        className="MuiSelect-icon-104"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction-108",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled-110",
                                            "colorError": "MuiSvgIcon-colorError-109",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary-106",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary-107",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-111",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-113",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-112",
                                            "root": "MuiSvgIcon-root-105",
                                          }
                                        }
                                        color="inherit"
                                        component="svg"
                                        fontSize="default"
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root-105 MuiSelect-icon-104"
                                          focusable="false"
                                          role="presentation"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </SvgIcon>
                                    </WithStyles(SvgIcon)>
                                  </ArrowDropDown>
                                </pure(ArrowDropDown)>
                                <WithStyles(Menu)
                                  MenuListProps={
                                    Object {
                                      "disableListWrap": true,
                                      "role": "listbox",
                                    }
                                  }
                                  PaperProps={
                                    Object {
                                      "style": Object {
                                        "minWidth": null,
                                      },
                                    }
                                  }
                                  id="menu-"
                                  onClose={[Function]}
                                  open={false}
                                >
                                  <Menu
                                    MenuListProps={
                                      Object {
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": null,
                                        },
                                      }
                                    }
                                    classes={
                                      Object {
                                        "paper": "MuiMenu-paper-114",
                                      }
                                    }
                                    disableAutoFocusItem={false}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                    theme={
                                      Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "hover": "rgba(0, 0, 0, 0.08)",
                                            "hoverOpacity": 0.08,
                                            "selected": "rgba(0, 0, 0, 0.14)",
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                          "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                          "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": Object {
                                          "unit": 8,
                                        },
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.46429em",
                                          },
                                          "body1Next": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "lineHeight": "1.71429em",
                                          },
                                          "body2Next": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.5,
                                          },
                                          "button": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "textTransform": "uppercase",
                                          },
                                          "buttonNext": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.375em",
                                          },
                                          "captionNext": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "display1": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.20588em",
                                          },
                                          "display2": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.8125rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.13333em",
                                            "marginLeft": "-.02em",
                                          },
                                          "display3": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "-.02em",
                                            "lineHeight": "1.30357em",
                                            "marginLeft": "-.02em",
                                          },
                                          "display4": Object {
                                            "color": "rgba(0, 0, 0, 0.54)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "7rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-.04em",
                                            "lineHeight": "1.14286em",
                                            "marginLeft": "-.04em",
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1,
                                          },
                                          "h2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1,
                                          },
                                          "h3": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.04,
                                          },
                                          "h4": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.17,
                                          },
                                          "h5": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.33,
                                          },
                                          "h6": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "headline": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.35417em",
                                          },
                                          "overline": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subheading": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "lineHeight": "1.5em",
                                          },
                                          "subtitle1": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                          "title": Object {
                                            "color": "rgba(0, 0, 0, 0.87)",
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.3125rem",
                                            "fontWeight": 500,
                                            "lineHeight": "1.16667em",
                                          },
                                          "useNextVariants": false,
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "tooltip": 1500,
                                        },
                                      }
                                    }
                                    transitionDuration="auto"
                                  >
                                    <WithStyles(Popover)
                                      PaperProps={
                                        Object {
                                          "classes": Object {
                                            "root": "MuiMenu-paper-114",
                                          },
                                          "style": Object {
                                            "minWidth": null,
                                          },
                                        }
                                      }
                                      anchorOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      getContentAnchorEl={[Function]}
                                      id="menu-"
                                      onClose={[Function]}
                                      onEntering={[Function]}
                                      open={false}
                                      transformOrigin={
                                        Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        }
                                      }
                                      transitionDuration="auto"
                                    >
                                      <Popover
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper-114",
                                            },
                                            "style": Object {
                                              "minWidth": null,
                                            },
                                          }
                                        }
                                        TransitionComponent={[Function]}
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        anchorReference="anchorEl"
                                        classes={
                                          Object {
                                            "paper": "MuiPopover-paper-115",
                                          }
                                        }
                                        elevation={8}
                                        getContentAnchorEl={[Function]}
                                        id="menu-"
                                        marginThreshold={16}
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <WithStyles(Modal)
                                          BackdropProps={
                                            Object {
                                              "invisible": true,
                                            }
                                          }
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                        >
                                          <Modal
                                            BackdropComponent={[Function]}
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            classes={
                                              Object {
                                                "hidden": "MuiModal-hidden-117",
                                                "root": "MuiModal-root-116",
                                              }
                                            }
                                            closeAfterTransition={false}
                                            disableAutoFocus={false}
                                            disableBackdropClick={false}
                                            disableEnforceFocus={false}
                                            disableEscapeKeyDown={false}
                                            disablePortal={false}
                                            disableRestoreFocus={false}
                                            hideBackdrop={false}
                                            id="menu-"
                                            keepMounted={false}
                                            manager={
                                              ModalManager {
                                                "data": Array [],
                                                "handleContainerOverflow": true,
                                                "hideSiblingNodes": true,
                                                "modals": Array [],
                                              }
                                            }
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </WithStyles(Modal)>
                                      </Popover>
                                    </WithStyles(Popover)>
                                  </Menu>
                                </WithStyles(Menu)>
                              </div>
                            </SelectInput>
                          </div>
                        </InputBase>
                      </WithFormControlContext(InputBase)>
                    </WithStyles(WithFormControlContext(InputBase))>
                  </Input>
                </WithStyles(Input)>
              </Select>
            </WithFormControlContext(Select)>
          </WithStyles(WithFormControlContext(Select))>
          <WithStyles(WithFormControlContext(FormHelperText))>
            <WithFormControlContext(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained-94",
                  "disabled": "MuiFormHelperText-disabled-92",
                  "error": "MuiFormHelperText-error-91",
                  "filled": "MuiFormHelperText-filled-96",
                  "focused": "MuiFormHelperText-focused-95",
                  "marginDense": "MuiFormHelperText-marginDense-93",
                  "required": "MuiFormHelperText-required-97",
                  "root": "MuiFormHelperText-root-90",
                }
              }
            >
              <FormHelperText
                classes={
                  Object {
                    "contained": "MuiFormHelperText-contained-94",
                    "disabled": "MuiFormHelperText-disabled-92",
                    "error": "MuiFormHelperText-error-91",
                    "filled": "MuiFormHelperText-filled-96",
                    "focused": "MuiFormHelperText-focused-95",
                    "marginDense": "MuiFormHelperText-marginDense-93",
                    "required": "MuiFormHelperText-required-97",
                    "root": "MuiFormHelperText-root-90",
                  }
                }
                component="p"
                muiFormControl={
                  Object {
                    "adornedStart": false,
                    "disabled": false,
                    "error": false,
                    "filled": true,
                    "focused": false,
                    "margin": "none",
                    "onBlur": [Function],
                    "onEmpty": [Function],
                    "onFilled": [Function],
                    "onFocus": [Function],
                    "required": false,
                    "variant": "standard",
                  }
                }
              >
                <p
                  className="MuiFormHelperText-root-90 MuiFormHelperText-filled-96"
                >
                  A track type
                </p>
              </FormHelperText>
            </WithFormControlContext(FormHelperText)>
          </WithStyles(WithFormControlContext(FormHelperText))>
        </div>
      </FormControl>
    </WithStyles(FormControl)>
  </TextField>,
]
`;

exports[`<ConfirmTrack /> shallowly renders 1`] = `
<ConfirmTrack
  classes={
    Object {
      "spacing": "ConfirmTrack-spacing-1",
    }
  }
  rootModel={
    Object {
      "activeDrawerWidgets": Object {},
      "configuration": Object {
        "configId": "testing",
        "rpc": Object {
          "configId": "testid",
        },
      },
      "drawerWidgets": Object {},
      "drawerWidth": 384,
      "menuBars": Array [
        Object {
          "id": "testid",
          "menus": Array [],
          "type": "MainMenuBar",
        },
      ],
      "sessionName": "UnnamedSession",
      "views": Array [],
      "width": 512,
    }
  }
  trackAdapter={
    Object {
      "bamLocation": Object {
        "uri": "test.bam",
      },
      "index": Object {
        "location": Object {
          "uri": "test.bam.bai",
        },
      },
      "type": "BamAdapter",
    }
  }
  trackData={
    Object {
      "uri": "test.bam",
    }
  }
  trackName=""
  trackType="AlignmentsTrack"
  updateTrackAdapter={[Function]}
  updateTrackName={[Function]}
  updateTrackType={[Function]}
/>
`;
